   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               		.file 0 "/home/penguin/Code/projects/ese381/review/lab3" "main.c"
  13               	.global	main
  15               	main:
  16               	.LFB0:
  17               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        **** * clk_main_ext_32768Hz.c
   3:main.c        **** *
   4:main.c        **** * Created: 2/20/2025 22:00:15 PM
   5:main.c        **** * Author : Stanley Cokro
   6:main.c        **** * ID: 115120484
   7:main.c        **** * Lab Section: 1
   8:main.c        **** * Description: Testing both internal and crystal oscillators
   9:main.c        **** *              Button roulette edition.
  10:main.c        **** *
  11:main.c        **** *              Start up times are going to be crucial.
  12:main.c        **** *
  13:main.c        **** *              The osc that is being used is Schrodinger's
  14:main.c        **** *              oscillator. There is no way to determine the
  15:main.c        **** *              current oscillator being used.
  16:main.c        **** *
  17:main.c        **** *              You can only determine which is being used on
  18:main.c        **** *              the next button press (taking measurement).
  19:main.c        **** *
  20:main.c        **** *              If it takes a bit of time before oscillating
  21:main.c        **** *              crystal is being used. Else, internal RC.
  22:main.c        **** *
  23:main.c        **** *              This is analogous to Schrodinger's cat. You
  24:main.c        **** *              cannot tell if the cat is dead or alive
  25:main.c        **** *              until the next measured instance which would
  26:main.c        **** *              be when you open the box.
  27:main.c        **** *
  28:main.c        **** * Testing procedure: Press the button an unknown amount of
  29:main.c        **** *                    time (or have a friend or lab partner)
  30:main.c        **** *                    do so. Your mode has been "shuffled"
  31:main.c        **** *                    and you cannot determine whether or
  32:main.c        **** *                    not you are using the internal RC
  33:main.c        **** *                    oscillator or if you are using the
  34:main.c        **** *                    crystal oscillator. Connect an
  35:main.c        **** *                    oscilloscope probe to pin A7. You now
  36:main.c        **** *                    need to observe the waveform carefully.
  37:main.c        **** *                    Press the button, and look carefully at
  38:main.c        **** *                    the oscilloscope. When you hit the
  39:main.c        **** *                    button, if the button causes the screen
  40:main.c        **** *                    to "flick" instantaneously, then that
  41:main.c        **** *                    means that it's an RC oscillator. The RC
  42:main.c        **** *                    oscillator has a startup time of roughly
  43:main.c        **** *                    400 microseconds. However, the crystal
  44:main.c        **** *                    oscillator has a startup time of UP TO
  45:main.c        **** *                    2 seconds, with a minimum of roughly
  46:main.c        **** *                    300 milliseconds. That is a significant
  47:main.c        **** *                    difference that is noticeable with the
  48:main.c        **** *                    human eye. When you eventually wait and
  49:main.c        **** *                    observe the eventual screen flick on the
  50:main.c        **** *                    oscilloscope as if it was displaying a
  51:main.c        **** *                    different waveform, you can be certain
  52:main.c        **** *                    the noticeably longer delay is the
  53:main.c        **** *                    crystal "waking-up".
  54:main.c        **** */
  55:main.c        **** 
  56:main.c        **** #include <avr/io.h>
  57:main.c        **** 
  58:main.c        **** int main(void)
  59:main.c        **** {
  18               		.loc 1 59 1 view -0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  60:main.c        ****     // next (which is first) button press, enables crystal
  61:main.c        ****     uint8_t mode = 0;
  24               		.loc 1 61 5 view .LVU1
  25               	.LVL0:
  62:main.c        **** 
  63:main.c        ****     // set B2 as an input
  64:main.c        ****     VPORTB_DIR &= ~PIN2_bm;
  26               		.loc 1 64 4 view .LVU2
  27               		.loc 1 64 15 is_stmt 0 view .LVU3
  28 0000 84B1      		in r24,0x4
  29 0002 8B7F      		andi r24,lo8(-5)
  30 0004 84B9      		out 0x4,r24
  65:main.c        ****     // PULLUP resistor for PB2
  66:main.c        ****     PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
  31               		.loc 1 66 4 is_stmt 1 view .LVU4
  32               		.loc 1 66 19 is_stmt 0 view .LVU5
  33 0006 88E0      		ldi r24,lo8(8)
  34 0008 8093 3204 		sts 1074,r24
  61:main.c        **** 
  35               		.loc 1 61 13 view .LVU6
  36 000c 20E0      		ldi r18,0
  37 000e 00C0      		rjmp .L2
  38               	.LVL1:
  39               	.L4:
  67:main.c        **** 
  68:main.c        ****     // loop code goes here
  69:main.c        ****     while(1) {
  70:main.c        ****         // check if button is pressed
  71:main.c        ****         if (!(VPORTB_IN & PIN2_bm))
  72:main.c        ****         {
  73:main.c        ****             // trap button-holding
  74:main.c        ****             while (!(VPORTB_IN & PIN2_bm)) {}
  75:main.c        **** 
  76:main.c        ****             // when mode is 0, turn on the internal oscillator at 32KHz
  77:main.c        ****             if (mode == 0)
  78:main.c        ****             {
  79:main.c        ****                 CPU_CCP = CCP_IOREG_gc; // unlock temporarily
  80:main.c        ****                 // Enable CLKOUT and use the internal oscillator 32KHz
  81:main.c        ****                 CLKCTRL.MCLKCTRLA = CLKCTRL_CLKOUT_bm | CLKCTRL_CLKSEL_OSC32K_gc;
  82:main.c        **** 
  83:main.c        ****                 CPU_CCP = CCP_IOREG_gc; // unlock temporarily
  84:main.c        ****                 // Make the oscillator run unconditionally
  85:main.c        ****                 CLKCTRL.OSC32KCTRLA = CLKCTRL_RUNSTDBY_bm;
  86:main.c        **** 
  87:main.c        ****                 // disable everything (and turns off the crystal)
  88:main.c        ****                 CPU_CCP = CCP_IOREG_gc; // unlock temporarily
  89:main.c        ****                 CLKCTRL.XOSC32KCTRLA = ~CLKCTRL_ENABLE_bm;
  90:main.c        **** 
  91:main.c        ****                 mode = 1;
  92:main.c        ****             }
  93:main.c        ****             // when mode is 1, turn on the crystal oscillator
  94:main.c        ****             else if (mode == 1)
  40               		.loc 1 94 18 is_stmt 1 view .LVU7
  41               		.loc 1 94 21 is_stmt 0 view .LVU8
  42 0010 2130      		cpi r18,lo8(1)
  43 0012 01F4      		brne .L5
  95:main.c        ****             {
  96:main.c        ****                 CPU_CCP = CCP_IOREG_gc; // unlock temporarily
  44               		.loc 1 96 16 is_stmt 1 view .LVU9
  45               		.loc 1 96 24 is_stmt 0 view .LVU10
  46 0014 88ED      		ldi r24,lo8(-40)
  47 0016 84BF      		out __CCP__,r24
  97:main.c        ****                 // Enable CLKOUT and use the crystal oscillator 32KHz
  98:main.c        ****                 CLKCTRL.MCLKCTRLA = CLKCTRL_CLKOUT_bm | CLKCTRL_CLKSEL_XOSC32K_gc;
  48               		.loc 1 98 16 is_stmt 1 view .LVU11
  49               		.loc 1 98 34 is_stmt 0 view .LVU12
  50 0018 E0E6      		ldi r30,lo8(96)
  51 001a F0E0      		ldi r31,0
  52 001c 22E8      		ldi r18,lo8(-126)
  53               	.LVL2:
  54               		.loc 1 98 34 view .LVU13
  55 001e 2083      		st Z,r18
  99:main.c        **** 
 100:main.c        ****                 // Enable CLKOUT and use the crystal oscillator 32KHz
 101:main.c        ****                 CPU_CCP = CCP_IOREG_gc; // unlock temporarily
  56               		.loc 1 101 16 is_stmt 1 view .LVU14
  57               		.loc 1 101 24 is_stmt 0 view .LVU15
  58 0020 84BF      		out __CCP__,r24
 102:main.c        ****                 // Run unconditionally (CLKCTRL_RUNSTDBY_bm),
 103:main.c        ****                 // Set Crystal Start-Up Time to 16k cycles
 104:main.c        ****                 // Select external crystal
 105:main.c        ****                 // Disable low power mode
 106:main.c        ****                 // Enable the XOSC32K
 107:main.c        ****                 CLKCTRL.XOSC32KCTRLA = CLKCTRL_RUNSTDBY_bm | CLKCTRL_CSUT_64K_gc | CLKCTRL_SELHF_XT
  59               		.loc 1 107 16 is_stmt 1 view .LVU16
  60               		.loc 1 107 37 is_stmt 0 view .LVU17
  61 0022 81EB      		ldi r24,lo8(-79)
  62 0024 848F      		std Z+28,r24
 108:main.c        ****                 mode = 0;
  63               		.loc 1 108 17 is_stmt 1 view .LVU18
  64               	.LVL3:
  65               		.loc 1 108 22 is_stmt 0 view .LVU19
  66 0026 292F      		mov r18,r25
  67 0028 00C0      		rjmp .L5
  68               	.LVL4:
  69               	.L7:
  70               	.LBB2:
 109:main.c        ****             }
 110:main.c        **** 
 111:main.c        ****             // obligatory small delay here to prevent bouncing
 112:main.c        ****             // I could use _delay_ms or _delay_us but... I
 113:main.c        ****             // don't want to have to download the .h into the code
 114:main.c        ****             for (int i=0; i<50; i++) {}
  71               		.loc 1 114 39 is_stmt 1 discriminator 3 view .LVU20
  72               		.loc 1 114 34 discriminator 3 view .LVU21
  73 002a 0196      		adiw r24,1
  74               	.LVL5:
  75               	.L6:
  76               		.loc 1 114 28 discriminator 1 view .LVU22
  77 002c 8233      		cpi r24,50
  78 002e 9105      		cpc r25,__zero_reg__
  79 0030 04F0      		brlt .L7
  80               	.LVL6:
  81               	.L2:
  82               		.loc 1 114 28 is_stmt 0 discriminator 1 view .LVU23
  83               	.LBE2:
  69:main.c        ****         // check if button is pressed
  84               		.loc 1 69 5 is_stmt 1 view .LVU24
  71:main.c        ****         {
  85               		.loc 1 71 9 view .LVU25
  71:main.c        ****         {
  86               		.loc 1 71 15 is_stmt 0 view .LVU26
  87 0032 86B1      		in r24,0x6
  88 0034 982F      		mov r25,r24
  89 0036 9470      		andi r25,lo8(4)
  71:main.c        ****         {
  90               		.loc 1 71 12 view .LVU27
  91 0038 82FD      		sbrc r24,2
  92 003a 00C0      		rjmp .L2
  93               	.L3:
  74:main.c        **** 
  94               		.loc 1 74 44 is_stmt 1 discriminator 1 view .LVU28
  74:main.c        **** 
  95               		.loc 1 74 20 discriminator 1 view .LVU29
  96 003c 329B      		sbis 0x6,2
  97 003e 00C0      		rjmp .L3
  77:main.c        ****             {
  98               		.loc 1 77 13 view .LVU30
  77:main.c        ****             {
  99               		.loc 1 77 16 is_stmt 0 view .LVU31
 100 0040 2111      		cpse r18,__zero_reg__
 101 0042 00C0      		rjmp .L4
  79:main.c        ****                 // Enable CLKOUT and use the internal oscillator 32KHz
 102               		.loc 1 79 16 is_stmt 1 view .LVU32
  79:main.c        ****                 // Enable CLKOUT and use the internal oscillator 32KHz
 103               		.loc 1 79 24 is_stmt 0 view .LVU33
 104 0044 88ED      		ldi r24,lo8(-40)
 105 0046 84BF      		out __CCP__,r24
  81:main.c        **** 
 106               		.loc 1 81 16 is_stmt 1 view .LVU34
  81:main.c        **** 
 107               		.loc 1 81 34 is_stmt 0 view .LVU35
 108 0048 E0E6      		ldi r30,lo8(96)
 109 004a F0E0      		ldi r31,0
 110 004c 91E8      		ldi r25,lo8(-127)
 111 004e 9083      		st Z,r25
  83:main.c        ****                 // Make the oscillator run unconditionally
 112               		.loc 1 83 16 is_stmt 1 view .LVU36
  83:main.c        ****                 // Make the oscillator run unconditionally
 113               		.loc 1 83 24 is_stmt 0 view .LVU37
 114 0050 84BF      		out __CCP__,r24
  85:main.c        **** 
 115               		.loc 1 85 16 is_stmt 1 view .LVU38
  85:main.c        **** 
 116               		.loc 1 85 36 is_stmt 0 view .LVU39
 117 0052 90E8      		ldi r25,lo8(-128)
 118 0054 908F      		std Z+24,r25
  88:main.c        ****                 CLKCTRL.XOSC32KCTRLA = ~CLKCTRL_ENABLE_bm;
 119               		.loc 1 88 16 is_stmt 1 view .LVU40
  88:main.c        ****                 CLKCTRL.XOSC32KCTRLA = ~CLKCTRL_ENABLE_bm;
 120               		.loc 1 88 24 is_stmt 0 view .LVU41
 121 0056 84BF      		out __CCP__,r24
  89:main.c        **** 
 122               		.loc 1 89 16 is_stmt 1 view .LVU42
  89:main.c        **** 
 123               		.loc 1 89 37 is_stmt 0 view .LVU43
 124 0058 8EEF      		ldi r24,lo8(-2)
 125 005a 848F      		std Z+28,r24
  91:main.c        ****             }
 126               		.loc 1 91 17 is_stmt 1 view .LVU44
 127               	.LVL7:
  91:main.c        ****             }
 128               		.loc 1 91 22 is_stmt 0 view .LVU45
 129 005c 21E0      		ldi r18,lo8(1)
 130               	.LVL8:
 131               	.L5:
 132               		.loc 1 114 13 is_stmt 1 view .LVU46
 133               	.LBB3:
 134               		.loc 1 114 18 view .LVU47
 135               		.loc 1 114 22 is_stmt 0 view .LVU48
 136 005e 80E0      		ldi r24,0
 137 0060 90E0      		ldi r25,0
 138               		.loc 1 114 13 view .LVU49
 139 0062 00C0      		rjmp .L6
 140               	.LBE3:
 141               		.cfi_endproc
 142               	.LFE0:
 144               	.Letext0:
 145               		.file 2 "/usr/avr/include/stdint.h"
 146               		.file 3 "/usr/avr/include/avr/ioavr128db48.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
   output.elf-main.s:2      *ABS*:0000003e __SP_H__
   output.elf-main.s:3      *ABS*:0000003d __SP_L__
   output.elf-main.s:4      *ABS*:0000003f __SREG__
   output.elf-main.s:5      *ABS*:0000003b __RAMPZ__
   output.elf-main.s:6      *ABS*:00000034 __CCP__
   output.elf-main.s:7      *ABS*:00000000 __tmp_reg__
   output.elf-main.s:8      *ABS*:00000001 __zero_reg__
   output.elf-main.s:15     .text:00000000 main
   output.elf-main.s:18     .text:00000000 .Loc.0
   output.elf-main.s:19     .text:00000000 L0
   output.elf-main.s:24     .text:00000000 .Loc.1
   output.elf-main.s:26     .text:00000000 .Loc.2
   output.elf-main.s:27     .text:00000000 .Loc.3
   output.elf-main.s:31     .text:00000006 .Loc.4
   output.elf-main.s:32     .text:00000006 .Loc.5
   output.elf-main.s:35     .text:0000000c .Loc.6
   output.elf-main.s:40     .text:00000010 .Loc.7
   output.elf-main.s:41     .text:00000010 .Loc.8
   output.elf-main.s:44     .text:00000014 .Loc.9
   output.elf-main.s:45     .text:00000014 .Loc.10
   output.elf-main.s:48     .text:00000018 .Loc.11
   output.elf-main.s:49     .text:00000018 .Loc.12
   output.elf-main.s:54     .text:0000001e .Loc.13
   output.elf-main.s:56     .text:00000020 .Loc.14
   output.elf-main.s:57     .text:00000020 .Loc.15
   output.elf-main.s:59     .text:00000022 .Loc.16
   output.elf-main.s:60     .text:00000022 .Loc.17
   output.elf-main.s:63     .text:00000026 .Loc.18
   output.elf-main.s:65     .text:00000026 .Loc.19
   output.elf-main.s:71     .text:0000002a .Loc.20
   output.elf-main.s:72     .text:0000002a .Loc.21
   output.elf-main.s:76     .text:0000002c .Loc.22
   output.elf-main.s:82     .text:00000032 .Loc.23
   output.elf-main.s:84     .text:00000032 .Loc.24
   output.elf-main.s:85     .text:00000032 .Loc.25
   output.elf-main.s:86     .text:00000032 .Loc.26
   output.elf-main.s:90     .text:00000038 .Loc.27
   output.elf-main.s:94     .text:0000003c .Loc.28
   output.elf-main.s:95     .text:0000003c .Loc.29
   output.elf-main.s:98     .text:00000040 .Loc.30
   output.elf-main.s:99     .text:00000040 .Loc.31
   output.elf-main.s:102    .text:00000044 .Loc.32
   output.elf-main.s:103    .text:00000044 .Loc.33
   output.elf-main.s:106    .text:00000048 .Loc.34
   output.elf-main.s:107    .text:00000048 .Loc.35
   output.elf-main.s:112    .text:00000050 .Loc.36
   output.elf-main.s:113    .text:00000050 .Loc.37
   output.elf-main.s:115    .text:00000052 .Loc.38
   output.elf-main.s:116    .text:00000052 .Loc.39
   output.elf-main.s:119    .text:00000056 .Loc.40
   output.elf-main.s:120    .text:00000056 .Loc.41
   output.elf-main.s:122    .text:00000058 .Loc.42
   output.elf-main.s:123    .text:00000058 .Loc.43
   output.elf-main.s:126    .text:0000005c .Loc.44
   output.elf-main.s:128    .text:0000005c .Loc.45
   output.elf-main.s:132    .text:0000005e .Loc.46
   output.elf-main.s:134    .text:0000005e .Loc.47
   output.elf-main.s:135    .text:0000005e .Loc.48
   output.elf-main.s:138    .text:00000062 .Loc.49
   output.elf-main.s:141    .text:00000064 L0
   output.elf-main.s:147    .text:00000064 L0
                     .debug_frame:00000000 L0
   output.elf-main.s:81     .text:00000032 .L2
   output.elf-main.s:131    .text:0000005e .L5
   output.elf-main.s:69     .text:0000002a .L7
   output.elf-main.s:93     .text:0000003c .L3
   output.elf-main.s:39     .text:00000010 .L4
   output.elf-main.s:75     .text:0000002c .L6
   output.elf-main.s:598    .debug_abbrev:00000000 .Ldebug_abbrev0
   output.elf-main.s:10     .text:00000000 .Ltext0
   output.elf-main.s:144    .text:00000064 .Letext0
   output.elf-main.s:971    .debug_line:00000000 .Ldebug_line0
   output.elf-main.s:16     .text:00000000 .LFB0
   output.elf-main.s:142    .text:00000064 .LFE0
   output.elf-main.s:882    .debug_loclists:00000018 .LLST0
   output.elf-main.s:869    .debug_loclists:0000000c .LVUS0
   output.elf-main.s:961    .debug_rnglists:0000000c .LLRL1
   output.elf-main.s:922    .debug_loclists:0000003e .LLST2
   output.elf-main.s:917    .debug_loclists:0000003a .LVUS2
   output.elf-main.s:148    .debug_info:00000000 .Ldebug_info0

NO UNDEFINED SYMBOLS
