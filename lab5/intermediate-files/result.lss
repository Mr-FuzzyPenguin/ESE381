   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               		.file 0 "/home/penguin/Code/projects/ese381/review/lab5" "main.c"
  13               	.global	init_spi0_SerLCD
  15               	init_spi0_SerLCD:
  16               	.LFB5:
  17               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        **** * read_LM74_SPI.c
   3:main.c        **** *
   4:main.c        **** * Created: 3/24/2025 2:49:32 PM
   5:main.c        **** *
   6:main.c        **** * Author : Stanley Cokro and Katherine Trusinski
   7:main.c        **** * ID: 115120484
   8:main.c        **** * Lab Section: 1
   9:main.c        **** * Description: Re-attempting to complete the previous lab
  10:main.c        **** *              due to issues with getting correct display from
  11:main.c        **** *              last time
  12:main.c        **** */
  13:main.c        **** 
  14:main.c        **** #include <avr/io.h>
  15:main.c        **** #include <stdio.h>
  16:main.c        **** 
  17:main.c        **** #define F_CPU 4000000UL
  18:main.c        **** #include <util/delay.h>
  19:main.c        **** 
  20:main.c        **** 
  21:main.c        **** char dsp_buff1[21];
  22:main.c        **** char dsp_buff2[21];
  23:main.c        **** char dsp_buff3[21];
  24:main.c        **** char dsp_buff4[21];
  25:main.c        **** 
  26:main.c        **** // This is code taken from example 7.1 for getting started with SPI
  27:main.c        **** void init_spi0_SerLCD (void) { // Configure SPI0
  18               		.loc 1 27 30 view -0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  28:main.c        **** 	PORTA.DIR |= PIN4_bm; // Set MOSI pin to output
  24               		.loc 1 28 1 view .LVU1
  25               		.loc 1 28 6 is_stmt 0 view .LVU2
  26 0000 E0E0      		ldi r30,0
  27 0002 F4E0      		ldi r31,lo8(4)
  28 0004 8081      		ld r24,Z
  29               		.loc 1 28 11 view .LVU3
  30 0006 8061      		ori r24,lo8(16)
  31 0008 8083      		st Z,r24
  29:main.c        **** 	PORTA.DIR &= ~PIN5_bm; // Set MISO pin to input
  32               		.loc 1 29 1 is_stmt 1 view .LVU4
  33               		.loc 1 29 6 is_stmt 0 view .LVU5
  34 000a 8081      		ld r24,Z
  35               		.loc 1 29 11 view .LVU6
  36 000c 8F7D      		andi r24,lo8(-33)
  37 000e 8083      		st Z,r24
  30:main.c        **** 	PORTA.DIR |= PIN6_bm; // Set SCK pin to output
  38               		.loc 1 30 1 is_stmt 1 view .LVU7
  39               		.loc 1 30 6 is_stmt 0 view .LVU8
  40 0010 8081      		ld r24,Z
  41               		.loc 1 30 11 view .LVU9
  42 0012 8064      		ori r24,lo8(64)
  43 0014 8083      		st Z,r24
  31:main.c        **** 	PORTA.DIR |= PIN7_bm; // Set SS pin to output
  44               		.loc 1 31 1 is_stmt 1 view .LVU10
  45               		.loc 1 31 6 is_stmt 0 view .LVU11
  46 0016 8081      		ld r24,Z
  47               		.loc 1 31 11 view .LVU12
  48 0018 8068      		ori r24,lo8(-128)
  49 001a 8083      		st Z,r24
  32:main.c        **** 	
  33:main.c        **** 	// start it logical high
  34:main.c        **** 	PORTA.OUT |= PIN7_bm;
  50               		.loc 1 34 1 is_stmt 1 view .LVU13
  51               		.loc 1 34 6 is_stmt 0 view .LVU14
  52 001c 8481      		ldd r24,Z+4
  53               		.loc 1 34 11 view .LVU15
  54 001e 8068      		ori r24,lo8(-128)
  55 0020 8483      		std Z+4,r24
  35:main.c        **** 
  36:main.c        **** 	SPI0.CTRLB = SPI_SSD_bm | SPI_MODE_0_gc;
  56               		.loc 1 36 1 is_stmt 1 view .LVU16
  57               		.loc 1 36 12 is_stmt 0 view .LVU17
  58 0022 E0E4      		ldi r30,lo8(64)
  59 0024 F9E0      		ldi r31,lo8(9)
  60 0026 84E0      		ldi r24,lo8(4)
  61 0028 8183      		std Z+1,r24
  37:main.c        **** 	SPI0.CTRLA = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_PRESC_DIV64_gc;
  62               		.loc 1 37 1 is_stmt 1 view .LVU18
  63               		.loc 1 37 12 is_stmt 0 view .LVU19
  64 002a 85E2      		ldi r24,lo8(37)
  65 002c 8083      		st Z,r24
  66               	/* epilogue start */
  38:main.c        **** 
  39:main.c        **** }
  67               		.loc 1 39 1 view .LVU20
  68 002e 0895      		ret
  69               		.cfi_endproc
  70               	.LFE5:
  72               	.global	write_spi0_SerLCD
  74               	write_spi0_SerLCD:
  75               	.LVL0:
  76               	.LFB6:
  40:main.c        **** 
  41:main.c        **** // writes a single character.
  42:main.c        **** void write_spi0_SerLCD(unsigned char data) { // Writing a character
  77               		.loc 1 42 44 is_stmt 1 view -0
  78               		.cfi_startproc
  79               	/* prologue: function */
  80               	/* frame size = 0 */
  81               	/* stack size = 0 */
  82               	.L__stack_usage = 0
  43:main.c        **** 	PORTA.OUT &= ~PIN7_bm; // Writing data... set SS pin value to LOW
  83               		.loc 1 43 1 view .LVU22
  84               		.loc 1 43 6 is_stmt 0 view .LVU23
  85 0030 E0E0      		ldi r30,0
  86 0032 F4E0      		ldi r31,lo8(4)
  87 0034 9481      		ldd r25,Z+4
  88               		.loc 1 43 11 view .LVU24
  89 0036 9F77      		andi r25,lo8(127)
  90 0038 9483      		std Z+4,r25
  44:main.c        **** 	SPI0.DATA = data; // loads the data register
  91               		.loc 1 44 1 is_stmt 1 view .LVU25
  92               		.loc 1 44 11 is_stmt 0 view .LVU26
  93 003a 8093 4409 		sts 2372,r24
  45:main.c        **** 	while (!(SPI0.INTFLAGS & SPI_IF_bm)); // Waiting for data to be exchanged
  94               		.loc 1 45 2 is_stmt 1 view .LVU27
  95               	.LVL1:
  96               	.L3:
  97               		.loc 1 45 9 discriminator 1 view .LVU28
  98               		.loc 1 45 14 is_stmt 0 discriminator 1 view .LVU29
  99 003e 8091 4309 		lds r24,2371
 100               		.loc 1 45 9 discriminator 1 view .LVU30
 101 0042 8115      		cp r24, __zero_reg__
 102 0044 04F4      		brge .L3
  46:main.c        **** 	PORTA.OUT |= PIN7_bm; // Done! Set SS pin value to HIGH
 103               		.loc 1 46 1 is_stmt 1 view .LVU31
 104               		.loc 1 46 6 is_stmt 0 view .LVU32
 105 0046 E0E0      		ldi r30,0
 106 0048 F4E0      		ldi r31,lo8(4)
 107 004a 8481      		ldd r24,Z+4
 108               		.loc 1 46 11 view .LVU33
 109 004c 8068      		ori r24,lo8(-128)
 110 004e 8483      		std Z+4,r24
 111               	.LVL2:
 112               	/* epilogue start */
  47:main.c        **** }
 113               		.loc 1 47 1 view .LVU34
 114 0050 0895      		ret
 115               		.cfi_endproc
 116               	.LFE6:
 118               	.global	update_SerLCD
 120               	update_SerLCD:
 121               	.LFB7:
  48:main.c        **** 
  49:main.c        **** // all this does is take the dsp_buff* and write it directly into SPI0.DATA
  50:main.c        **** void update_SerLCD(void){
 122               		.loc 1 50 25 is_stmt 1 view -0
 123               		.cfi_startproc
 124 0052 CF93      		push r28
 125               		.cfi_def_cfa_offset 3
 126               		.cfi_offset 28, -2
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 1 */
 130               	.L__stack_usage = 1
  51:main.c        **** 	// clear and write
  52:main.c        **** 	write_spi0_SerLCD('|');
 131               		.loc 1 52 2 view .LVU36
 132 0054 8CE7      		ldi r24,lo8(124)
 133 0056 0E94 0000 		call write_spi0_SerLCD
 134               	.LVL3:
  53:main.c        **** 	write_spi0_SerLCD('-');
 135               		.loc 1 53 2 view .LVU37
 136 005a 8DE2      		ldi r24,lo8(45)
 137 005c 0E94 0000 		call write_spi0_SerLCD
 138               	.LVL4:
  54:main.c        **** 	
  55:main.c        **** 	// start at the first line
  56:main.c        **** 	write_spi0_SerLCD(254);
 139               		.loc 1 56 2 view .LVU38
 140 0060 8EEF      		ldi r24,lo8(-2)
 141 0062 0E94 0000 		call write_spi0_SerLCD
 142               	.LVL5:
  57:main.c        **** 	write_spi0_SerLCD(128+0);
 143               		.loc 1 57 2 view .LVU39
 144 0066 80E8      		ldi r24,lo8(-128)
 145 0068 0E94 0000 		call write_spi0_SerLCD
 146               	.LVL6:
  58:main.c        **** 	for (uint8_t i = 0; dsp_buff1[i];){
 147               		.loc 1 58 2 view .LVU40
 148               	.LBB8:
 149               		.loc 1 58 7 view .LVU41
 150               		.loc 1 58 15 is_stmt 0 view .LVU42
 151 006c C0E0      		ldi r28,0
 152               		.loc 1 58 2 view .LVU43
 153 006e 00C0      		rjmp .L5
 154               	.LVL7:
 155               	.L6:
  59:main.c        **** 		write_spi0_SerLCD(dsp_buff1[i++]);
 156               		.loc 1 59 3 is_stmt 1 view .LVU44
 157               		.loc 1 59 32 is_stmt 0 view .LVU45
 158 0070 CF5F      		subi r28,lo8(-(1))
 159               	.LVL8:
 160               		.loc 1 59 3 view .LVU46
 161 0072 0E94 0000 		call write_spi0_SerLCD
 162               	.LVL9:
 163               	.L5:
  58:main.c        **** 	for (uint8_t i = 0; dsp_buff1[i];){
 164               		.loc 1 58 22 is_stmt 1 discriminator 1 view .LVU47
  58:main.c        **** 	for (uint8_t i = 0; dsp_buff1[i];){
 165               		.loc 1 58 31 is_stmt 0 discriminator 1 view .LVU48
 166 0076 EC2F      		mov r30,r28
 167 0078 F0E0      		ldi r31,0
 168 007a E050      		subi r30,lo8(-(dsp_buff1))
 169 007c F040      		sbci r31,hi8(-(dsp_buff1))
 170 007e 8081      		ld r24,Z
  58:main.c        **** 	for (uint8_t i = 0; dsp_buff1[i];){
 171               		.loc 1 58 22 discriminator 1 view .LVU49
 172 0080 8111      		cpse r24,__zero_reg__
 173 0082 00C0      		rjmp .L6
 174               	.LBE8:
  60:main.c        **** 	}
  61:main.c        **** 	// move to second line
  62:main.c        **** 	write_spi0_SerLCD(254);
 175               		.loc 1 62 2 is_stmt 1 view .LVU50
 176 0084 8EEF      		ldi r24,lo8(-2)
 177 0086 0E94 0000 		call write_spi0_SerLCD
 178               	.LVL10:
  63:main.c        **** 	write_spi0_SerLCD(128+64);
 179               		.loc 1 63 2 view .LVU51
 180 008a 80EC      		ldi r24,lo8(-64)
 181 008c 0E94 0000 		call write_spi0_SerLCD
 182               	.LVL11:
  64:main.c        **** 	for (uint8_t i = 0; dsp_buff2[i];){
 183               		.loc 1 64 2 view .LVU52
 184               	.LBB9:
 185               		.loc 1 64 7 view .LVU53
 186               		.loc 1 64 15 is_stmt 0 view .LVU54
 187 0090 C0E0      		ldi r28,0
 188               	.LVL12:
 189               		.loc 1 64 2 view .LVU55
 190 0092 00C0      		rjmp .L7
 191               	.LVL13:
 192               	.L8:
  65:main.c        **** 		write_spi0_SerLCD(dsp_buff2[i++]);
 193               		.loc 1 65 3 is_stmt 1 view .LVU56
 194               		.loc 1 65 32 is_stmt 0 view .LVU57
 195 0094 CF5F      		subi r28,lo8(-(1))
 196               	.LVL14:
 197               		.loc 1 65 3 view .LVU58
 198 0096 0E94 0000 		call write_spi0_SerLCD
 199               	.LVL15:
 200               	.L7:
  64:main.c        **** 	for (uint8_t i = 0; dsp_buff2[i];){
 201               		.loc 1 64 22 is_stmt 1 discriminator 1 view .LVU59
  64:main.c        **** 	for (uint8_t i = 0; dsp_buff2[i];){
 202               		.loc 1 64 31 is_stmt 0 discriminator 1 view .LVU60
 203 009a EC2F      		mov r30,r28
 204 009c F0E0      		ldi r31,0
 205 009e E050      		subi r30,lo8(-(dsp_buff2))
 206 00a0 F040      		sbci r31,hi8(-(dsp_buff2))
 207 00a2 8081      		ld r24,Z
  64:main.c        **** 	for (uint8_t i = 0; dsp_buff2[i];){
 208               		.loc 1 64 22 discriminator 1 view .LVU61
 209 00a4 8111      		cpse r24,__zero_reg__
 210 00a6 00C0      		rjmp .L8
 211               	.LBE9:
  66:main.c        **** 	}
  67:main.c        **** 	// move to third line
  68:main.c        **** 	write_spi0_SerLCD(254);
 212               		.loc 1 68 2 is_stmt 1 view .LVU62
 213 00a8 8EEF      		ldi r24,lo8(-2)
 214 00aa 0E94 0000 		call write_spi0_SerLCD
 215               	.LVL16:
  69:main.c        **** 	write_spi0_SerLCD(128+20);
 216               		.loc 1 69 2 view .LVU63
 217 00ae 84E9      		ldi r24,lo8(-108)
 218 00b0 0E94 0000 		call write_spi0_SerLCD
 219               	.LVL17:
  70:main.c        **** 	for (uint8_t i = 0; dsp_buff3[i];){
 220               		.loc 1 70 2 view .LVU64
 221               	.LBB10:
 222               		.loc 1 70 7 view .LVU65
 223               		.loc 1 70 15 is_stmt 0 view .LVU66
 224 00b4 C0E0      		ldi r28,0
 225               	.LVL18:
 226               		.loc 1 70 2 view .LVU67
 227 00b6 00C0      		rjmp .L9
 228               	.LVL19:
 229               	.L10:
  71:main.c        **** 		write_spi0_SerLCD(dsp_buff3[i++]);
 230               		.loc 1 71 3 is_stmt 1 view .LVU68
 231               		.loc 1 71 32 is_stmt 0 view .LVU69
 232 00b8 CF5F      		subi r28,lo8(-(1))
 233               	.LVL20:
 234               		.loc 1 71 3 view .LVU70
 235 00ba 0E94 0000 		call write_spi0_SerLCD
 236               	.LVL21:
 237               	.L9:
  70:main.c        **** 	for (uint8_t i = 0; dsp_buff3[i];){
 238               		.loc 1 70 22 is_stmt 1 discriminator 1 view .LVU71
  70:main.c        **** 	for (uint8_t i = 0; dsp_buff3[i];){
 239               		.loc 1 70 31 is_stmt 0 discriminator 1 view .LVU72
 240 00be EC2F      		mov r30,r28
 241 00c0 F0E0      		ldi r31,0
 242 00c2 E050      		subi r30,lo8(-(dsp_buff3))
 243 00c4 F040      		sbci r31,hi8(-(dsp_buff3))
 244 00c6 8081      		ld r24,Z
  70:main.c        **** 	for (uint8_t i = 0; dsp_buff3[i];){
 245               		.loc 1 70 22 discriminator 1 view .LVU73
 246 00c8 8111      		cpse r24,__zero_reg__
 247 00ca 00C0      		rjmp .L10
 248               	.LBE10:
  72:main.c        **** 	}
  73:main.c        **** 	// move to fourth line	
  74:main.c        **** 	write_spi0_SerLCD(254);
 249               		.loc 1 74 2 is_stmt 1 view .LVU74
 250 00cc 8EEF      		ldi r24,lo8(-2)
 251 00ce 0E94 0000 		call write_spi0_SerLCD
 252               	.LVL22:
  75:main.c        **** 	write_spi0_SerLCD(128+84);
 253               		.loc 1 75 2 view .LVU75
 254 00d2 84ED      		ldi r24,lo8(-44)
 255 00d4 0E94 0000 		call write_spi0_SerLCD
 256               	.LVL23:
  76:main.c        **** 	for (uint8_t i = 0; dsp_buff4[i];){
 257               		.loc 1 76 2 view .LVU76
 258               	.LBB11:
 259               		.loc 1 76 7 view .LVU77
 260               		.loc 1 76 15 is_stmt 0 view .LVU78
 261 00d8 C0E0      		ldi r28,0
 262               	.LVL24:
 263               		.loc 1 76 2 view .LVU79
 264 00da 00C0      		rjmp .L11
 265               	.LVL25:
 266               	.L12:
  77:main.c        **** 		write_spi0_SerLCD(dsp_buff4[i++]);
 267               		.loc 1 77 3 is_stmt 1 view .LVU80
 268               		.loc 1 77 32 is_stmt 0 view .LVU81
 269 00dc CF5F      		subi r28,lo8(-(1))
 270               	.LVL26:
 271               		.loc 1 77 3 view .LVU82
 272 00de 0E94 0000 		call write_spi0_SerLCD
 273               	.LVL27:
 274               	.L11:
  76:main.c        **** 	for (uint8_t i = 0; dsp_buff4[i];){
 275               		.loc 1 76 22 is_stmt 1 discriminator 1 view .LVU83
  76:main.c        **** 	for (uint8_t i = 0; dsp_buff4[i];){
 276               		.loc 1 76 31 is_stmt 0 discriminator 1 view .LVU84
 277 00e2 EC2F      		mov r30,r28
 278 00e4 F0E0      		ldi r31,0
 279 00e6 E050      		subi r30,lo8(-(dsp_buff4))
 280 00e8 F040      		sbci r31,hi8(-(dsp_buff4))
 281 00ea 8081      		ld r24,Z
  76:main.c        **** 	for (uint8_t i = 0; dsp_buff4[i];){
 282               		.loc 1 76 22 discriminator 1 view .LVU85
 283 00ec 8111      		cpse r24,__zero_reg__
 284 00ee 00C0      		rjmp .L12
 285               	.LBE11:
  78:main.c        **** 	}
  79:main.c        **** 	
  80:main.c        **** 	// wait so that it doesn't write too frequently
  81:main.c        **** 	_delay_ms(500);
 286               		.loc 1 81 2 is_stmt 1 view .LVU86
 287               	.LVL28:
 288               	.LBB12:
 289               	.LBI12:
 290               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** 
  43:/usr/avr/include/util/delay.h **** #  ifndef __ATTR_ALWAYS_INLINE__
  44:/usr/avr/include/util/delay.h **** #    define __ATTR_ALWAYS_INLINE__ __inline__ __attribute__((__always_inline__))
  45:/usr/avr/include/util/delay.h **** #  endif
  46:/usr/avr/include/util/delay.h **** 
  47:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  48:/usr/avr/include/util/delay.h **** 
  49:/usr/avr/include/util/delay.h **** #include <stdint.h>
  50:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  51:/usr/avr/include/util/delay.h **** 
  52:/usr/avr/include/util/delay.h **** /** \file */
  53:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  54:/usr/avr/include/util/delay.h ****     \code
  55:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  56:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456e6
  57:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  58:/usr/avr/include/util/delay.h ****     \endcode
  59:/usr/avr/include/util/delay.h **** 
  60:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  61:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  62:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  63:/usr/avr/include/util/delay.h ****     used.
  64:/usr/avr/include/util/delay.h **** 
  65:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  66:/usr/avr/include/util/delay.h ****     busy-wait functions from <tt>\<util/delay_basic.h\></tt>.  They are meant as
  67:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  68:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  69:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  70:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  71:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  72:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  73:/usr/avr/include/util/delay.h **** 
  74:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  75:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  76:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  77:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  78:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  79:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  80:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  81:/usr/avr/include/util/delay.h ****     routines linked into the application.
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  84:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  85:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  86:/usr/avr/include/util/delay.h **** */
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** 
  89:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  90:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  91:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  92:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  93:/usr/avr/include/util/delay.h ****     \def F_CPU
  94:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  95:/usr/avr/include/util/delay.h **** 
  96:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  97:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  98:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
  99:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 100:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 101:/usr/avr/include/util/delay.h **** 
 102:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 103:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864e6 for 3.6864 MHz).
 104:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 105:/usr/avr/include/util/delay.h ****     integer value.
 106:/usr/avr/include/util/delay.h ****  */
 107:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 108:/usr/avr/include/util/delay.h **** #endif
 109:/usr/avr/include/util/delay.h **** 
 110:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 111:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 112:/usr/avr/include/util/delay.h **** #endif
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h **** /**
 115:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 116:/usr/avr/include/util/delay.h **** 
 117:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 118:/usr/avr/include/util/delay.h **** 
 119:/usr/avr/include/util/delay.h ****    The macro #F_CPU is supposed to be defined to a
 120:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 121:/usr/avr/include/util/delay.h **** 
 122:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 125:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 126:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10&nbsp;ms, providing
 127:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 128:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 129:/usr/avr/include/util/delay.h **** 
 130:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has \c __builtin_avr_delay_cycles()
 131:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 132:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow may result in
 133:/usr/avr/include/util/delay.h ****    no delay i.e., 0&nbsp;ms.
 134:/usr/avr/include/util/delay.h **** 
 135:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 136:/usr/avr/include/util/delay.h ****    an integral value.  By default, the clock cycles are rounded up to the next
 137:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 138:/usr/avr/include/util/delay.h ****    microseconds of delay.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 141:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 142:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 143:/usr/avr/include/util/delay.h ****    respectively.
 144:/usr/avr/include/util/delay.h **** 
 145:/usr/avr/include/util/delay.h ****    \note The implementation of _delay_ms() based on
 146:/usr/avr/include/util/delay.h ****    \c __builtin_avr_delay_cycles() is not backward compatible with older
 147:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 148:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 149:/usr/avr/include/util/delay.h ****    must be defined before including this header file.
 150:/usr/avr/include/util/delay.h ****  */
 151:/usr/avr/include/util/delay.h **** static __ATTR_ALWAYS_INLINE__ void _delay_ms(double __ms);
 152:/usr/avr/include/util/delay.h **** 
 153:/usr/avr/include/util/delay.h **** void
 154:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 291               		.loc 2 154 1 view .LVU87
 292               	.LBB13:
 155:/usr/avr/include/util/delay.h **** {
 156:/usr/avr/include/util/delay.h **** 	double __tmp ;
 293               		.loc 2 156 2 view .LVU88
 157:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) \
 158:/usr/avr/include/util/delay.h ****   && !defined(__DELAY_BACKWARD_COMPATIBLE__)
 159:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 294               		.loc 2 159 2 view .LVU89
 160:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(uint32_t);
 295               		.loc 2 160 2 view .LVU90
 161:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 296               		.loc 2 161 2 view .LVU91
 162:/usr/avr/include/util/delay.h **** 
 163:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 164:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)__builtin_fabs(__tmp);
 165:/usr/avr/include/util/delay.h **** 
 166:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 167:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(__builtin_fabs(__tmp)+0.5);
 168:/usr/avr/include/util/delay.h **** 
 169:/usr/avr/include/util/delay.h **** 	#else
 170:/usr/avr/include/util/delay.h **** 		//round up by default
 171:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(__builtin_ceil(__builtin_fabs(__tmp)));
 297               		.loc 2 171 3 view .LVU92
 172:/usr/avr/include/util/delay.h **** 	#endif
 173:/usr/avr/include/util/delay.h **** 
 174:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 298               		.loc 2 174 2 view .LVU93
 299 00f0 2FE7      		ldi r18,lo8(399999)
 300 00f2 8AE1      		ldi r24,hi8(399999)
 301 00f4 96E0      		ldi r25,hlo8(399999)
 302 00f6 2150      	1:	subi r18,1
 303 00f8 8040      		sbci r24,0
 304 00fa 9040      		sbci r25,0
 305 00fc 01F4      		brne 1b
 306 00fe 00C0      		rjmp .
 307 0100 0000      		nop
 308               	.LVL29:
 309               	/* epilogue start */
 310               		.loc 2 174 2 is_stmt 0 view .LVU94
 311               	.LBE13:
 312               	.LBE12:
  82:main.c        **** }
 313               		.loc 1 82 1 view .LVU95
 314 0102 CF91      		pop r28
 315               	.LVL30:
 316               		.loc 1 82 1 view .LVU96
 317 0104 0895      		ret
 318               		.cfi_endproc
 319               	.LFE7:
 321               		.section	.rodata.str1.1,"aMS",@progbits,1
 322               	.LC0:
 323 0000 2020 2020 		.string	"                    "
 323      2020 2020 
 323      2020 2020 
 323      2020 2020 
 323      2020 2020 
 324               		.text
 325               	.global	clear_display_buffs
 327               	clear_display_buffs:
 328               	.LFB8:
  83:main.c        **** 
  84:main.c        **** void clear_display_buffs(void){
 329               		.loc 1 84 31 is_stmt 1 view -0
 330               		.cfi_startproc
 331               	/* prologue: function */
 332               	/* frame size = 0 */
 333               	/* stack size = 0 */
 334               	.L__stack_usage = 0
  85:main.c        **** 	sprintf(dsp_buff1, "                    ");
 335               		.loc 1 85 2 view .LVU98
 336 0106 85E1      		ldi r24,lo8(21)
 337 0108 E0E0      		ldi r30,lo8(.LC0)
 338 010a F0E0      		ldi r31,hi8(.LC0)
 339 010c A0E0      		ldi r26,lo8(dsp_buff1)
 340 010e B0E0      		ldi r27,hi8(dsp_buff1)
 341               		0:
 342 0110 0190      		ld r0,Z+
 343 0112 0D92      		st X+,r0
 344 0114 8A95      		dec r24
 345 0116 01F4      		brne 0b
  86:main.c        **** 	sprintf(dsp_buff2, "                    ");
 346               		.loc 1 86 2 view .LVU99
 347 0118 85E1      		ldi r24,lo8(21)
 348 011a E0E0      		ldi r30,lo8(.LC0)
 349 011c F0E0      		ldi r31,hi8(.LC0)
 350 011e A0E0      		ldi r26,lo8(dsp_buff2)
 351 0120 B0E0      		ldi r27,hi8(dsp_buff2)
 352               		0:
 353 0122 0190      		ld r0,Z+
 354 0124 0D92      		st X+,r0
 355 0126 8A95      		dec r24
 356 0128 01F4      		brne 0b
  87:main.c        **** 	sprintf(dsp_buff3, "                    ");
 357               		.loc 1 87 2 view .LVU100
 358 012a 85E1      		ldi r24,lo8(21)
 359 012c E0E0      		ldi r30,lo8(.LC0)
 360 012e F0E0      		ldi r31,hi8(.LC0)
 361 0130 A0E0      		ldi r26,lo8(dsp_buff3)
 362 0132 B0E0      		ldi r27,hi8(dsp_buff3)
 363               		0:
 364 0134 0190      		ld r0,Z+
 365 0136 0D92      		st X+,r0
 366 0138 8A95      		dec r24
 367 013a 01F4      		brne 0b
  88:main.c        **** 	sprintf(dsp_buff4, "                    ");
 368               		.loc 1 88 2 view .LVU101
 369 013c 85E1      		ldi r24,lo8(21)
 370 013e E0E0      		ldi r30,lo8(.LC0)
 371 0140 F0E0      		ldi r31,hi8(.LC0)
 372 0142 A0E0      		ldi r26,lo8(dsp_buff4)
 373 0144 B0E0      		ldi r27,hi8(dsp_buff4)
 374               		0:
 375 0146 0190      		ld r0,Z+
 376 0148 0D92      		st X+,r0
 377 014a 8A95      		dec r24
 378 014c 01F4      		brne 0b
 379               	/* epilogue start */
  89:main.c        **** }
 380               		.loc 1 89 1 is_stmt 0 view .LVU102
 381 014e 0895      		ret
 382               		.cfi_endproc
 383               	.LFE8:
 385               	.global	init_spi0_LM74
 387               	init_spi0_LM74:
 388               	.LFB9:
  90:main.c        **** 
  91:main.c        **** void init_spi0_LM74(void)
  92:main.c        **** {
 389               		.loc 1 92 1 is_stmt 1 view -0
 390               		.cfi_startproc
 391               	/* prologue: function */
 392               	/* frame size = 0 */
 393               	/* stack size = 0 */
 394               	.L__stack_usage = 0
  93:main.c        **** 	PORTA.DIR |= PIN4_bm; // Set MOSI pin to output
 395               		.loc 1 93 1 view .LVU104
 396               		.loc 1 93 6 is_stmt 0 view .LVU105
 397 0150 E0E0      		ldi r30,0
 398 0152 F4E0      		ldi r31,lo8(4)
 399 0154 8081      		ld r24,Z
 400               		.loc 1 93 11 view .LVU106
 401 0156 8061      		ori r24,lo8(16)
 402 0158 8083      		st Z,r24
  94:main.c        **** 	PORTA.DIR &= ~PIN5_bm; // Set MISO pin to input
 403               		.loc 1 94 1 is_stmt 1 view .LVU107
 404               		.loc 1 94 6 is_stmt 0 view .LVU108
 405 015a 8081      		ld r24,Z
 406               		.loc 1 94 11 view .LVU109
 407 015c 8F7D      		andi r24,lo8(-33)
 408 015e 8083      		st Z,r24
  95:main.c        **** 	PORTA.DIR |= PIN6_bm; // Set SCK pin to output
 409               		.loc 1 95 1 is_stmt 1 view .LVU110
 410               		.loc 1 95 6 is_stmt 0 view .LVU111
 411 0160 8081      		ld r24,Z
 412               		.loc 1 95 11 view .LVU112
 413 0162 8064      		ori r24,lo8(64)
 414 0164 8083      		st Z,r24
  96:main.c        **** 	// We are wiring LM74 to chip select of E0
  97:main.c        **** 	VPORTE_DIR |= PIN0_bm;
 415               		.loc 1 97 1 is_stmt 1 view .LVU113
 416               		.loc 1 97 2 is_stmt 0 view .LVU114
 417 0166 80B3      		in r24,0x10
 418               		.loc 1 97 12 view .LVU115
 419 0168 8160      		ori r24,lo8(1)
 420 016a 80BB      		out 0x10,r24
  98:main.c        **** 	// start it logical high
  99:main.c        **** 	VPORTE_OUT |= PIN0_bm;
 421               		.loc 1 99 1 is_stmt 1 view .LVU116
 422               		.loc 1 99 2 is_stmt 0 view .LVU117
 423 016c 81B3      		in r24,0x11
 424               		.loc 1 99 12 view .LVU118
 425 016e 8160      		ori r24,lo8(1)
 426 0170 81BB      		out 0x11,r24
 100:main.c        **** 
 101:main.c        **** 	SPI0.CTRLB = SPI_SSD_bm | SPI_MODE_0_gc;
 427               		.loc 1 101 1 is_stmt 1 view .LVU119
 428               		.loc 1 101 12 is_stmt 0 view .LVU120
 429 0172 E0E4      		ldi r30,lo8(64)
 430 0174 F9E0      		ldi r31,lo8(9)
 431 0176 84E0      		ldi r24,lo8(4)
 432 0178 8183      		std Z+1,r24
 102:main.c        **** 	SPI0.CTRLA = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_PRESC_DIV16_gc;
 433               		.loc 1 102 1 is_stmt 1 view .LVU121
 434               		.loc 1 102 12 is_stmt 0 view .LVU122
 435 017a 83E2      		ldi r24,lo8(35)
 436 017c 8083      		st Z,r24
 437               	/* epilogue start */
 103:main.c        **** 
 104:main.c        **** }
 438               		.loc 1 104 1 view .LVU123
 439 017e 0895      		ret
 440               		.cfi_endproc
 441               	.LFE9:
 443               	.global	read_spi0_LM74
 445               	read_spi0_LM74:
 446               	.LFB10:
 105:main.c        **** 
 106:main.c        **** uint16_t read_spi0_LM74(void){
 447               		.loc 1 106 30 is_stmt 1 view -0
 448               		.cfi_startproc
 449               	/* prologue: function */
 450               	/* frame size = 0 */
 451               	/* stack size = 0 */
 452               	.L__stack_usage = 0
 107:main.c        **** 	// Assert chip select!
 108:main.c        **** 	VPORTE_OUT &= ~PIN0_bm;
 453               		.loc 1 108 1 view .LVU125
 454               		.loc 1 108 12 is_stmt 0 view .LVU126
 455 0180 81B3      		in r24,0x11
 456 0182 8E7F      		andi r24,lo8(-2)
 457 0184 81BB      		out 0x11,r24
 109:main.c        **** 	
 110:main.c        **** 	// start the result as 0
 111:main.c        **** 	uint16_t result = 0;
 458               		.loc 1 111 2 is_stmt 1 view .LVU127
 459               	.LVL31:
 112:main.c        **** 	
 113:main.c        **** 	// load the data register with a dummy value
 114:main.c        **** 	// to get the clock going
 115:main.c        **** 	SPI0.DATA = 255;
 460               		.loc 1 115 1 view .LVU128
 461               		.loc 1 115 11 is_stmt 0 view .LVU129
 462 0186 8FEF      		ldi r24,lo8(-1)
 463 0188 8093 4409 		sts 2372,r24
 116:main.c        **** 	
 117:main.c        **** 	// check if ready to be read.
 118:main.c        **** 	while (!(SPI0.INTFLAGS & SPI_IF_bm)) {}
 464               		.loc 1 118 2 is_stmt 1 view .LVU130
 465               	.L16:
 466               		.loc 1 118 39 discriminator 1 view .LVU131
 467               		.loc 1 118 9 discriminator 1 view .LVU132
 468               		.loc 1 118 14 is_stmt 0 discriminator 1 view .LVU133
 469 018c 8091 4309 		lds r24,2371
 470               		.loc 1 118 9 discriminator 1 view .LVU134
 471 0190 8115      		cp r24, __zero_reg__
 472 0192 04F4      		brge .L16
 119:main.c        **** 	// READY! Write to a variable.
 120:main.c        **** 	// (also clears the INTFLAGS)
 121:main.c        **** 	
 122:main.c        **** 	// store the first half of the data into result
 123:main.c        **** 	// then bitshift the result to the left 8 spaces
 124:main.c        **** 	result = SPI0.DATA;
 473               		.loc 1 124 2 is_stmt 1 view .LVU135
 474               		.loc 1 124 14 is_stmt 0 view .LVU136
 475 0194 E0E4      		ldi r30,lo8(64)
 476 0196 F9E0      		ldi r31,lo8(9)
 477 0198 2481      		ldd r18,Z+4
 478               		.loc 1 124 9 view .LVU137
 479 019a 30E0      		ldi r19,0
 480               	.LVL32:
 125:main.c        **** 	result <<= 8;
 481               		.loc 1 125 2 is_stmt 1 view .LVU138
 482               		.loc 1 125 9 is_stmt 0 view .LVU139
 483 019c 322F      		mov r19,r18
 484 019e 2227      		clr r18
 485               	.LVL33:
 126:main.c        **** 	
 127:main.c        **** 	// load the clock
 128:main.c        **** 	SPI0.DATA = 255;
 486               		.loc 1 128 1 is_stmt 1 view .LVU140
 487               		.loc 1 128 11 is_stmt 0 view .LVU141
 488 01a0 8FEF      		ldi r24,lo8(-1)
 489 01a2 8483      		std Z+4,r24
 129:main.c        **** 	while (!(SPI0.INTFLAGS & SPI_IF_bm)) {}
 490               		.loc 1 129 2 is_stmt 1 view .LVU142
 491               	.L17:
 492               		.loc 1 129 39 discriminator 1 view .LVU143
 493               		.loc 1 129 9 discriminator 1 view .LVU144
 494               		.loc 1 129 14 is_stmt 0 discriminator 1 view .LVU145
 495 01a4 9091 4309 		lds r25,2371
 496               		.loc 1 129 9 discriminator 1 view .LVU146
 497 01a8 9115      		cp r25, __zero_reg__
 498 01aa 04F4      		brge .L17
 130:main.c        **** 	// read once more
 131:main.c        **** 	result |= SPI0.DATA;
 499               		.loc 1 131 2 is_stmt 1 view .LVU147
 500               		.loc 1 131 15 is_stmt 0 view .LVU148
 501 01ac 9091 4409 		lds r25,2372
 502               	.LVL34:
 132:main.c        **** 	
 133:main.c        **** 	// communication over. Set the chip select high
 134:main.c        **** 	VPORTE_OUT |= PIN0_bm;
 503               		.loc 1 134 1 is_stmt 1 view .LVU149
 504               		.loc 1 134 2 is_stmt 0 view .LVU150
 505 01b0 81B3      		in r24,0x11
 506               		.loc 1 134 12 view .LVU151
 507 01b2 8160      		ori r24,lo8(1)
 508 01b4 81BB      		out 0x11,r24
 135:main.c        **** 	
 136:main.c        **** 	return result;
 509               		.loc 1 136 2 is_stmt 1 view .LVU152
 137:main.c        **** }
 510               		.loc 1 137 1 is_stmt 0 view .LVU153
 511 01b6 A901      		movw r20,r18
 512 01b8 492B      		or r20,r25
 513 01ba CA01      		movw r24,r20
 514               	/* epilogue start */
 515 01bc 0895      		ret
 516               		.cfi_endproc
 517               	.LFE10:
 519               		.section	.rodata.str1.1
 520               	.LC1:
 521 0015 4875 6D61 		.string	"Human Readable LM74"
 521      6E20 5265 
 521      6164 6162 
 521      6C65 204C 
 521      4D37 3400 
 522               	.LC2:
 523 0029 2567 2043 		.string	"%g C"
 523      00
 524               	.LC3:
 525 002e 2567 2046 		.string	"%g F"
 525      00
 526               		.text
 527               	.global	main
 529               	main:
 530               	.LFB11:
 138:main.c        **** 
 139:main.c        **** int main(void)
 140:main.c        **** {
 531               		.loc 1 140 1 is_stmt 1 view -0
 532               		.cfi_startproc
 533 01be CDB7      		in r28,__SP_L__
 534 01c0 DEB7      		in r29,__SP_H__
 535               		.cfi_def_cfa_register 28
 536 01c2 AB97      		sbiw r28,43
 537               		.cfi_def_cfa_offset 45
 538 01c4 CDBF      		out __SP_L__,r28
 539 01c6 DEBF      		out __SP_H__,r29
 540               	/* prologue: function */
 541               	/* frame size = 43 */
 542               	/* stack size = 43 */
 543               	.L__stack_usage = 43
 141:main.c        **** 	// initialize the LCD
 142:main.c        **** 	init_spi0_LM74();
 544               		.loc 1 142 2 view .LVU155
 545 01c8 0E94 0000 		call init_spi0_LM74
 546               	.LVL35:
 143:main.c        **** 	init_spi0_SerLCD();
 547               		.loc 1 143 2 view .LVU156
 548 01cc 0E94 0000 		call init_spi0_SerLCD
 549               	.LVL36:
 144:main.c        **** 
 145:main.c        **** 	// display clear
 146:main.c        **** 	clear_display_buffs();
 550               		.loc 1 146 2 view .LVU157
 551 01d0 0E94 0000 		call clear_display_buffs
 552               	.LVL37:
 147:main.c        **** 
 148:main.c        **** 	// Clear board
 149:main.c        **** 	write_spi0_SerLCD('|');
 553               		.loc 1 149 2 view .LVU158
 554 01d4 8CE7      		ldi r24,lo8(124)
 555 01d6 0E94 0000 		call write_spi0_SerLCD
 556               	.LVL38:
 150:main.c        **** 	write_spi0_SerLCD('-');
 557               		.loc 1 150 2 view .LVU159
 558 01da 8DE2      		ldi r24,lo8(45)
 559 01dc 0E94 0000 		call write_spi0_SerLCD
 560               	.LVL39:
 151:main.c        **** 
 152:main.c        **** 	// alters and writes the clear command
 153:main.c        **** 	update_SerLCD();
 561               		.loc 1 153 2 view .LVU160
 562 01e0 0E94 0000 		call update_SerLCD
 563               	.LVL40:
 564 01e4 00C0      		rjmp .L23
 565               	.LVL41:
 566               	.L20:
 567               	.LBB14:
 568               	.LBB15:
 154:main.c        **** 	
 155:main.c        **** 	while(1)
 156:main.c        **** 	{		
 157:main.c        **** 		// start with a celcius_accumulator
 158:main.c        **** 		float celcius_accumulator = 0;
 159:main.c        **** 		uint16_t totalread = read_spi0_LM74();
 160:main.c        **** 
 161:main.c        **** 		// scaling and writing
 162:main.c        **** 		float scale = 0.0625;
 163:main.c        **** 
 164:main.c        **** 		// the magical two lines of code that I cannot explain why it works
 165:main.c        **** 		// but somehow gives us a string in binary. Don't ask how it works
 166:main.c        **** 		// because I have absolutely 0 clue.
 167:main.c        **** 		for (int i = 0; i < 16; i++)
 168:main.c        **** 			dsp_buff4[15-i]='0'+((totalread & (1 << i)) >> i);
 569               		.loc 1 168 4 view .LVU161
 570               		.loc 1 168 41 is_stmt 0 view .LVU162
 571 01e6 81E0      		ldi r24,lo8(1)
 572 01e8 90E0      		ldi r25,0
 573 01ea 022E      		mov r0,r18
 574 01ec 00C0      		rjmp 2f
 575               		1:
 576 01ee 880F      		lsl r24
 577 01f0 991F      		rol r25
 578               		2:
 579 01f2 0A94      		dec r0
 580 01f4 02F4      		brpl 1b
 581               		.loc 1 168 36 view .LVU163
 582 01f6 8221      		and r24,r2
 583 01f8 9321      		and r25,r3
 584               		.loc 1 168 48 view .LVU164
 585 01fa 022E      		mov r0,r18
 586 01fc 00C0      		rjmp 2f
 587               		1:
 588 01fe 9695      		lsr r25
 589 0200 8795      		ror r24
 590               		2:
 591 0202 0A94      		dec r0
 592 0204 02F4      		brpl 1b
 593               		.loc 1 168 16 view .LVU165
 594 0206 EFE0      		ldi r30,lo8(15)
 595 0208 F0E0      		ldi r31,0
 596 020a E21B      		sub r30,r18
 597 020c F30B      		sbc r31,r19
 598               		.loc 1 168 23 view .LVU166
 599 020e 805D      		subi r24,lo8(-(48))
 600               		.loc 1 168 19 view .LVU167
 601 0210 E050      		subi r30,lo8(-(dsp_buff4))
 602 0212 F040      		sbci r31,hi8(-(dsp_buff4))
 603 0214 8083      		st Z,r24
 167:main.c        **** 			dsp_buff4[15-i]='0'+((totalread & (1 << i)) >> i);
 604               		.loc 1 167 28 is_stmt 1 discriminator 3 view .LVU168
 605 0216 2F5F      		subi r18,-1
 606 0218 3F4F      		sbci r19,-1
 607               	.LVL42:
 608               	.L19:
 167:main.c        **** 			dsp_buff4[15-i]='0'+((totalread & (1 << i)) >> i);
 609               		.loc 1 167 21 discriminator 1 view .LVU169
 610 021a 2031      		cpi r18,16
 611 021c 3105      		cpc r19,__zero_reg__
 612 021e 04F0      		brlt .L20
 613               	.LBE15:
 169:main.c        **** 
 170:main.c        **** 
 171:main.c        **** 		// THE INITIAL OFFSET
 172:main.c        **** 		totalread >>= 3;
 614               		.loc 1 172 3 view .LVU170
 615               		.loc 1 172 13 is_stmt 0 view .LVU171
 616 0220 8101      		movw r16,r2
 617 0222 1695      		lsr r17
 618 0224 0795      		ror r16
 619 0226 1695      		lsr r17
 620 0228 0795      		ror r16
 621 022a 1695      		lsr r17
 622 022c 0795      		ror r16
 623               	.LVL43:
 173:main.c        **** 		
 174:main.c        **** 		// loop through 12 times
 175:main.c        **** 		for (uint8_t i=0; i<12; i++)
 624               		.loc 1 175 3 is_stmt 1 view .LVU172
 625               	.LBB16:
 626               		.loc 1 175 8 view .LVU173
 627               		.loc 1 175 16 is_stmt 0 view .LVU174
 628 022e 1AA6      		std Y+42,__zero_reg__
 629               	.LBE16:
 162:main.c        **** 
 630               		.loc 1 162 9 view .LVU175
 631 0230 E12C      		mov r14,__zero_reg__
 632 0232 F12C      		mov r15,__zero_reg__
 633 0234 80E8      		ldi r24,lo8(-128)
 634 0236 9DE3      		ldi r25,lo8(61)
 158:main.c        **** 		uint16_t totalread = read_spi0_LM74();
 635               		.loc 1 158 9 view .LVU176
 636 0238 C12C      		mov r12,__zero_reg__
 637 023a D12C      		mov r13,__zero_reg__
 638 023c 198A      		std Y+17,__zero_reg__
 639 023e 1A8A      		std Y+18,__zero_reg__
 640 0240 28A6      		std Y+40,r2
 641 0242 39A6      		std Y+41,r3
 642 0244 312C      		mov r3,__zero_reg__
 643 0246 8BA7      		std Y+43,r24
 644 0248 9FA3      		std Y+39,r25
 645               	.LBB17:
 646               		.loc 1 175 3 view .LVU177
 647 024a 00C0      		rjmp .L21
 648               	.LVL44:
 649               	.L22:
 176:main.c        **** 		{
 177:main.c        **** 			// magic!
 178:main.c        **** 			celcius_accumulator += scale * (totalread % 2);
 650               		.loc 1 178 4 is_stmt 1 view .LVU178
 651               		.loc 1 178 46 is_stmt 0 view .LVU179
 652 024c 602F      		mov r22,r16
 653 024e 6170      		andi r22,1<<0
 654 0250 7727      		clr r23
 655               		.loc 1 178 33 view .LVU180
 656 0252 80E0      		ldi r24,0
 657 0254 90E0      		ldi r25,0
 658 0256 0E94 0000 		call __floatunsisf
 659               	.LVL45:
 660 025a 4E2C      		mov r4,r14
 661 025c 5F2C      		mov r5,r15
 662 025e 6BA4      		ldd r6,Y+43
 663 0260 7FA0      		ldd r7,Y+39
 664 0262 A301      		movw r20,r6
 665 0264 9201      		movw r18,r4
 666 0266 6983      		std Y+1,r22
 667 0268 7A83      		std Y+2,r23
 668 026a 8B83      		std Y+3,r24
 669 026c 9C83      		std Y+4,r25
 670 026e 6981      		ldd r22,Y+1
 671 0270 7A81      		ldd r23,Y+2
 672 0272 8B81      		ldd r24,Y+3
 673 0274 9C81      		ldd r25,Y+4
 674 0276 0E94 0000 		call __mulsf3
 675               	.LVL46:
 676               		.loc 1 178 24 view .LVU181
 677 027a 6D83      		std Y+5,r22
 678 027c 7E83      		std Y+6,r23
 679 027e 8F83      		std Y+7,r24
 680 0280 9887      		std Y+8,r25
 681 0282 2D81      		ldd r18,Y+5
 682 0284 3E81      		ldd r19,Y+6
 683 0286 4F81      		ldd r20,Y+7
 684 0288 5885      		ldd r21,Y+8
 685 028a C986      		std Y+9,r12
 686 028c DA86      		std Y+10,r13
 687 028e 8989      		ldd r24,Y+17
 688 0290 8B87      		std Y+11,r24
 689 0292 9A89      		ldd r25,Y+18
 690 0294 9C87      		std Y+12,r25
 691 0296 6985      		ldd r22,Y+9
 692 0298 7A85      		ldd r23,Y+10
 693 029a 8B85      		ldd r24,Y+11
 694 029c 9C85      		ldd r25,Y+12
 695 029e 0E94 0000 		call __addsf3
 696               	.LVL47:
 697 02a2 C62E      		mov r12,r22
 698               	.LVL48:
 699               		.loc 1 178 24 view .LVU182
 700 02a4 D72E      		mov r13,r23
 701               	.LVL49:
 702               		.loc 1 178 24 view .LVU183
 703 02a6 898B      		std Y+17,r24
 704               	.LVL50:
 705               		.loc 1 178 24 view .LVU184
 706 02a8 9A8B      		std Y+18,r25
 707               	.LVL51:
 179:main.c        **** 			totalread>>= 1;
 708               		.loc 1 179 4 is_stmt 1 view .LVU185
 709               		.loc 1 179 13 is_stmt 0 view .LVU186
 710 02aa 1695      		lsr r17
 711 02ac 0795      		ror r16
 712               	.LVL52:
 180:main.c        **** 			scale = scale*2;
 713               		.loc 1 180 4 is_stmt 1 view .LVU187
 714               		.loc 1 180 10 is_stmt 0 view .LVU188
 715 02ae 8E2C      		mov r8,r14
 716 02b0 9F2C      		mov r9,r15
 717 02b2 A62C      		mov r10,r6
 718 02b4 B72C      		mov r11,r7
 719 02b6 A501      		movw r20,r10
 720 02b8 9401      		movw r18,r8
 721 02ba ED86      		std Y+13,r14
 722 02bc FE86      		std Y+14,r15
 723 02be 6F86      		std Y+15,r6
 724 02c0 788A      		std Y+16,r7
 725 02c2 6D85      		ldd r22,Y+13
 726 02c4 7E85      		ldd r23,Y+14
 727 02c6 8F85      		ldd r24,Y+15
 728 02c8 9889      		ldd r25,Y+16
 729 02ca 0E94 0000 		call __addsf3
 730               	.LVL53:
 731               		.loc 1 180 10 view .LVU189
 732 02ce E62E      		mov r14,r22
 733               	.LVL54:
 734               		.loc 1 180 10 view .LVU190
 735 02d0 F72E      		mov r15,r23
 736               	.LVL55:
 737               		.loc 1 180 10 view .LVU191
 738 02d2 8BA7      		std Y+43,r24
 739               	.LVL56:
 740               		.loc 1 180 10 view .LVU192
 741 02d4 9FA3      		std Y+39,r25
 742               	.LVL57:
 175:main.c        **** 		{
 743               		.loc 1 175 28 is_stmt 1 discriminator 3 view .LVU193
 744 02d6 3394      		inc r3
 745               	.LVL58:
 746               	.L21:
 175:main.c        **** 		{
 747               		.loc 1 175 22 discriminator 1 view .LVU194
 748 02d8 8CE0      		ldi r24,lo8(12)
 749 02da 3816      		cp r3,r24
 750 02dc 00F4      		brsh .+2
 751 02de 00C0      		rjmp .L22
 175:main.c        **** 		{
 752               		.loc 1 175 22 is_stmt 0 discriminator 1 view .LVU195
 753               	.LBE17:
 181:main.c        **** 			
 182:main.c        **** 		}
 183:main.c        **** 		// THE ENDING FINAL OFFSET
 184:main.c        **** 		celcius_accumulator -= 256 * (totalread% 2);			
 754               		.loc 1 184 3 is_stmt 1 view .LVU196
 755               		.loc 1 184 30 is_stmt 0 view .LVU197
 756 02e0 702F      		mov r23,r16
 757 02e2 7170      		andi r23,1<<0
 758 02e4 6627      		clr r22
 759               		.loc 1 184 23 view .LVU198
 760 02e6 80E0      		ldi r24,0
 761 02e8 90E0      		ldi r25,0
 762 02ea 0E94 0000 		call __floatunsisf
 763               	.LVL59:
 764 02ee 6B8B      		std Y+19,r22
 765 02f0 7C8B      		std Y+20,r23
 766 02f2 8D8B      		std Y+21,r24
 767 02f4 9E8B      		std Y+22,r25
 768 02f6 2B89      		ldd r18,Y+19
 769 02f8 3C89      		ldd r19,Y+20
 770 02fa 4D89      		ldd r20,Y+21
 771 02fc 5E89      		ldd r21,Y+22
 772 02fe CF8A      		std Y+23,r12
 773 0300 D88E      		std Y+24,r13
 774 0302 9989      		ldd r25,Y+17
 775 0304 998F      		std Y+25,r25
 776 0306 8A89      		ldd r24,Y+18
 777 0308 8A8F      		std Y+26,r24
 778 030a 6F89      		ldd r22,Y+23
 779 030c 788D      		ldd r23,Y+24
 780 030e 898D      		ldd r24,Y+25
 781 0310 9A8D      		ldd r25,Y+26
 782 0312 0E94 0000 		call __subsf3
 783               	.LVL60:
 784 0316 062F      		mov r16,r22
 785               	.LVL61:
 786               		.loc 1 184 23 view .LVU199
 787 0318 172F      		mov r17,r23
 788 031a 8A8B      		std Y+18,r24
 789               	.LVL62:
 790               		.loc 1 184 23 view .LVU200
 791 031c 998B      		std Y+17,r25
 792               	.LVL63:
 185:main.c        **** 	
 186:main.c        **** 		sprintf(dsp_buff1, "Human Readable LM74");
 793               		.loc 1 186 3 is_stmt 1 view .LVU201
 794 031e 84E1      		ldi r24,lo8(20)
 795               	.LVL64:
 796               		.loc 1 186 3 is_stmt 0 view .LVU202
 797 0320 E0E0      		ldi r30,lo8(.LC1)
 798 0322 F0E0      		ldi r31,hi8(.LC1)
 799 0324 A0E0      		ldi r26,lo8(dsp_buff1)
 800 0326 B0E0      		ldi r27,hi8(dsp_buff1)
 801               		0:
 802 0328 0190      		ld r0,Z+
 803 032a 0D92      		st X+,r0
 804 032c 8A95      		dec r24
 805 032e 01F4      		brne 0b
 187:main.c        **** 		sprintf(dsp_buff2, "%g C",celcius_accumulator);
 806               		.loc 1 187 3 is_stmt 1 view .LVU203
 807 0330 9F93      		push r25
 808               	.LVL65:
 809               		.loc 1 187 3 is_stmt 0 view .LVU204
 810 0332 9A89      		ldd r25,Y+18
 811 0334 9F93      		push r25
 812 0336 1F93      		push r17
 813 0338 0F93      		push r16
 814 033a 80E0      		ldi r24,lo8(.LC2)
 815 033c 90E0      		ldi r25,hi8(.LC2)
 816 033e 9F93      		push r25
 817 0340 8F93      		push r24
 818 0342 80E0      		ldi r24,lo8(dsp_buff2)
 819 0344 90E0      		ldi r25,hi8(dsp_buff2)
 820 0346 9F93      		push r25
 821 0348 8F93      		push r24
 822 034a 0E94 0000 		call sprintf
 823               	.LVL66:
 188:main.c        **** 		sprintf(dsp_buff3, "%g F", 32 + celcius_accumulator * 9 / 5);
 824               		.loc 1 188 3 is_stmt 1 view .LVU205
 825               		.loc 1 188 55 is_stmt 0 view .LVU206
 826 034e 20E0      		ldi r18,0
 827 0350 30E0      		ldi r19,0
 828 0352 40E1      		ldi r20,lo8(16)
 829 0354 51E4      		ldi r21,lo8(65)
 830 0356 8A89      		ldd r24,Y+18
 831 0358 9989      		ldd r25,Y+17
 832 035a 0B8F      		std Y+27,r16
 833 035c 1C8F      		std Y+28,r17
 834 035e 8D8F      		std Y+29,r24
 835 0360 9E8F      		std Y+30,r25
 836 0362 6B8D      		ldd r22,Y+27
 837 0364 7C8D      		ldd r23,Y+28
 838 0366 8D8D      		ldd r24,Y+29
 839 0368 9E8D      		ldd r25,Y+30
 840 036a 0E94 0000 		call __mulsf3
 841               	.LVL67:
 842               		.loc 1 188 59 view .LVU207
 843 036e 20E0      		ldi r18,0
 844 0370 30E0      		ldi r19,0
 845 0372 40EA      		ldi r20,lo8(-96)
 846 0374 50E4      		ldi r21,lo8(64)
 847 0376 6F8F      		std Y+31,r22
 848 0378 78A3      		std Y+32,r23
 849 037a 89A3      		std Y+33,r24
 850 037c 9AA3      		std Y+34,r25
 851 037e 6F8D      		ldd r22,Y+31
 852 0380 78A1      		ldd r23,Y+32
 853 0382 89A1      		ldd r24,Y+33
 854 0384 9AA1      		ldd r25,Y+34
 855 0386 0E94 0000 		call __divsf3
 856               	.LVL68:
 857               		.loc 1 188 33 view .LVU208
 858 038a 20E0      		ldi r18,0
 859 038c 30E0      		ldi r19,0
 860 038e 40E0      		ldi r20,0
 861 0390 52E4      		ldi r21,lo8(66)
 862 0392 6BA3      		std Y+35,r22
 863 0394 7CA3      		std Y+36,r23
 864 0396 8DA3      		std Y+37,r24
 865 0398 9EA3      		std Y+38,r25
 866 039a 6BA1      		ldd r22,Y+35
 867 039c 7CA1      		ldd r23,Y+36
 868 039e 8DA1      		ldd r24,Y+37
 869 03a0 9EA1      		ldd r25,Y+38
 870 03a2 0E94 0000 		call __addsf3
 871               	.LVL69:
 872               		.loc 1 188 3 view .LVU209
 873 03a6 9F93      		push r25
 874 03a8 8F93      		push r24
 875 03aa 7F93      		push r23
 876 03ac 6F93      		push r22
 877 03ae 80E0      		ldi r24,lo8(.LC3)
 878 03b0 90E0      		ldi r25,hi8(.LC3)
 879 03b2 9F93      		push r25
 880 03b4 8F93      		push r24
 881 03b6 80E0      		ldi r24,lo8(dsp_buff3)
 882 03b8 90E0      		ldi r25,hi8(dsp_buff3)
 883 03ba 9F93      		push r25
 884 03bc 8F93      		push r24
 885 03be 0E94 0000 		call sprintf
 886               	.LVL70:
 189:main.c        **** 		update_SerLCD();
 887               		.loc 1 189 3 is_stmt 1 view .LVU210
 888 03c2 0E94 0000 		call update_SerLCD
 889               	.LVL71:
 890               	.LBE14:
 155:main.c        **** 	{		
 891               		.loc 1 155 7 view .LVU211
 156:main.c        **** 		// start with a celcius_accumulator
 892               		.loc 1 156 2 is_stmt 0 view .LVU212
 893 03c6 CDBF      		out __SP_L__,r28
 894 03c8 DEBF      		out __SP_H__,r29
 895               	.LVL72:
 896               	.L23:
 155:main.c        **** 	{		
 897               		.loc 1 155 2 is_stmt 1 view .LVU213
 898               	.LBB19:
 158:main.c        **** 		uint16_t totalread = read_spi0_LM74();
 899               		.loc 1 158 3 view .LVU214
 159:main.c        **** 
 900               		.loc 1 159 3 view .LVU215
 159:main.c        **** 
 901               		.loc 1 159 24 is_stmt 0 view .LVU216
 902 03ca 0E94 0000 		call read_spi0_LM74
 903               	.LVL73:
 904 03ce 282E      		mov r2,r24
 905 03d0 392E      		mov r3,r25
 906               	.LVL74:
 162:main.c        **** 
 907               		.loc 1 162 3 is_stmt 1 view .LVU217
 167:main.c        **** 			dsp_buff4[15-i]='0'+((totalread & (1 << i)) >> i);
 908               		.loc 1 167 3 view .LVU218
 909               	.LBB18:
 167:main.c        **** 			dsp_buff4[15-i]='0'+((totalread & (1 << i)) >> i);
 910               		.loc 1 167 8 view .LVU219
 167:main.c        **** 			dsp_buff4[15-i]='0'+((totalread & (1 << i)) >> i);
 911               		.loc 1 167 12 is_stmt 0 view .LVU220
 912 03d2 20E0      		ldi r18,0
 913 03d4 30E0      		ldi r19,0
 167:main.c        **** 			dsp_buff4[15-i]='0'+((totalread & (1 << i)) >> i);
 914               		.loc 1 167 3 view .LVU221
 915 03d6 00C0      		rjmp .L19
 916               	.LBE18:
 917               	.LBE19:
 918               		.cfi_endproc
 919               	.LFE11:
 921               	.global	dsp_buff4
 922               		.section .bss
 925               	dsp_buff4:
 926 0000 0000 0000 		.zero	21
 926      0000 0000 
 926      0000 0000 
 926      0000 0000 
 926      0000 0000 
 927               	.global	dsp_buff3
 930               	dsp_buff3:
 931 0015 0000 0000 		.zero	21
 931      0000 0000 
 931      0000 0000 
 931      0000 0000 
 931      0000 0000 
 932               	.global	dsp_buff2
 935               	dsp_buff2:
 936 002a 0000 0000 		.zero	21
 936      0000 0000 
 936      0000 0000 
 936      0000 0000 
 936      0000 0000 
 937               	.global	dsp_buff1
 940               	dsp_buff1:
 941 003f 0000 0000 		.zero	21
 941      0000 0000 
 941      0000 0000 
 941      0000 0000 
 941      0000 0000 
 942               		.text
 943               	.Letext0:
 944               		.file 3 "/usr/avr/include/stdint.h"
 945               		.file 4 "/usr/avr/include/avr/ioavr128db48.h"
 946               		.file 5 "/usr/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
   output.elf-main.s:2      *ABS*:0000003e __SP_H__
   output.elf-main.s:3      *ABS*:0000003d __SP_L__
   output.elf-main.s:4      *ABS*:0000003f __SREG__
   output.elf-main.s:5      *ABS*:0000003b __RAMPZ__
   output.elf-main.s:6      *ABS*:00000034 __CCP__
   output.elf-main.s:7      *ABS*:00000000 __tmp_reg__
   output.elf-main.s:8      *ABS*:00000001 __zero_reg__
   output.elf-main.s:15     .text:00000000 init_spi0_SerLCD
   output.elf-main.s:18     .text:00000000 .Loc.0
   output.elf-main.s:19     .text:00000000 L0
   output.elf-main.s:24     .text:00000000 .Loc.1
   output.elf-main.s:25     .text:00000000 .Loc.2
   output.elf-main.s:29     .text:00000006 .Loc.3
   output.elf-main.s:32     .text:0000000a .Loc.4
   output.elf-main.s:33     .text:0000000a .Loc.5
   output.elf-main.s:35     .text:0000000c .Loc.6
   output.elf-main.s:38     .text:00000010 .Loc.7
   output.elf-main.s:39     .text:00000010 .Loc.8
   output.elf-main.s:41     .text:00000012 .Loc.9
   output.elf-main.s:44     .text:00000016 .Loc.10
   output.elf-main.s:45     .text:00000016 .Loc.11
   output.elf-main.s:47     .text:00000018 .Loc.12
   output.elf-main.s:50     .text:0000001c .Loc.13
   output.elf-main.s:51     .text:0000001c .Loc.14
   output.elf-main.s:53     .text:0000001e .Loc.15
   output.elf-main.s:56     .text:00000022 .Loc.16
   output.elf-main.s:57     .text:00000022 .Loc.17
   output.elf-main.s:62     .text:0000002a .Loc.18
   output.elf-main.s:63     .text:0000002a .Loc.19
   output.elf-main.s:67     .text:0000002e .Loc.20
   output.elf-main.s:69     .text:00000030 L0
   output.elf-main.s:74     .text:00000030 write_spi0_SerLCD
   output.elf-main.s:77     .text:00000030 .Loc.21
   output.elf-main.s:78     .text:00000030 L0
   output.elf-main.s:83     .text:00000030 .Loc.22
   output.elf-main.s:84     .text:00000030 .Loc.23
   output.elf-main.s:88     .text:00000036 .Loc.24
   output.elf-main.s:91     .text:0000003a .Loc.25
   output.elf-main.s:92     .text:0000003a .Loc.26
   output.elf-main.s:94     .text:0000003e .Loc.27
   output.elf-main.s:97     .text:0000003e .Loc.28
   output.elf-main.s:98     .text:0000003e .Loc.29
   output.elf-main.s:100    .text:00000042 .Loc.30
   output.elf-main.s:103    .text:00000046 .Loc.31
   output.elf-main.s:104    .text:00000046 .Loc.32
   output.elf-main.s:108    .text:0000004c .Loc.33
   output.elf-main.s:113    .text:00000050 .Loc.34
   output.elf-main.s:115    .text:00000052 L0
   output.elf-main.s:120    .text:00000052 update_SerLCD
   output.elf-main.s:122    .text:00000052 .Loc.35
   output.elf-main.s:123    .text:00000052 L0
   output.elf-main.s:131    .text:00000054 .Loc.36
   output.elf-main.s:135    .text:0000005a .Loc.37
   output.elf-main.s:139    .text:00000060 .Loc.38
   output.elf-main.s:143    .text:00000066 .Loc.39
   output.elf-main.s:147    .text:0000006c .Loc.40
   output.elf-main.s:149    .text:0000006c .Loc.41
   output.elf-main.s:150    .text:0000006c .Loc.42
   output.elf-main.s:152    .text:0000006e .Loc.43
   output.elf-main.s:156    .text:00000070 .Loc.44
   output.elf-main.s:157    .text:00000070 .Loc.45
   output.elf-main.s:160    .text:00000072 .Loc.46
   output.elf-main.s:164    .text:00000076 .Loc.47
   output.elf-main.s:165    .text:00000076 .Loc.48
   output.elf-main.s:940    .bss:0000003f dsp_buff1
   output.elf-main.s:171    .text:00000080 .Loc.49
   output.elf-main.s:175    .text:00000084 .Loc.50
   output.elf-main.s:179    .text:0000008a .Loc.51
   output.elf-main.s:183    .text:00000090 .Loc.52
   output.elf-main.s:185    .text:00000090 .Loc.53
   output.elf-main.s:186    .text:00000090 .Loc.54
   output.elf-main.s:189    .text:00000092 .Loc.55
   output.elf-main.s:193    .text:00000094 .Loc.56
   output.elf-main.s:194    .text:00000094 .Loc.57
   output.elf-main.s:197    .text:00000096 .Loc.58
   output.elf-main.s:201    .text:0000009a .Loc.59
   output.elf-main.s:202    .text:0000009a .Loc.60
   output.elf-main.s:935    .bss:0000002a dsp_buff2
   output.elf-main.s:208    .text:000000a4 .Loc.61
   output.elf-main.s:212    .text:000000a8 .Loc.62
   output.elf-main.s:216    .text:000000ae .Loc.63
   output.elf-main.s:220    .text:000000b4 .Loc.64
   output.elf-main.s:222    .text:000000b4 .Loc.65
   output.elf-main.s:223    .text:000000b4 .Loc.66
   output.elf-main.s:226    .text:000000b6 .Loc.67
   output.elf-main.s:230    .text:000000b8 .Loc.68
   output.elf-main.s:231    .text:000000b8 .Loc.69
   output.elf-main.s:234    .text:000000ba .Loc.70
   output.elf-main.s:238    .text:000000be .Loc.71
   output.elf-main.s:239    .text:000000be .Loc.72
   output.elf-main.s:930    .bss:00000015 dsp_buff3
   output.elf-main.s:245    .text:000000c8 .Loc.73
   output.elf-main.s:249    .text:000000cc .Loc.74
   output.elf-main.s:253    .text:000000d2 .Loc.75
   output.elf-main.s:257    .text:000000d8 .Loc.76
   output.elf-main.s:259    .text:000000d8 .Loc.77
   output.elf-main.s:260    .text:000000d8 .Loc.78
   output.elf-main.s:263    .text:000000da .Loc.79
   output.elf-main.s:267    .text:000000dc .Loc.80
   output.elf-main.s:268    .text:000000dc .Loc.81
   output.elf-main.s:271    .text:000000de .Loc.82
   output.elf-main.s:275    .text:000000e2 .Loc.83
   output.elf-main.s:276    .text:000000e2 .Loc.84
   output.elf-main.s:925    .bss:00000000 dsp_buff4
   output.elf-main.s:282    .text:000000ec .Loc.85
   output.elf-main.s:286    .text:000000f0 .Loc.86
   output.elf-main.s:291    .text:000000f0 .Loc.87
   output.elf-main.s:293    .text:000000f0 .Loc.88
   output.elf-main.s:294    .text:000000f0 .Loc.89
   output.elf-main.s:295    .text:000000f0 .Loc.90
   output.elf-main.s:296    .text:000000f0 .Loc.91
   output.elf-main.s:297    .text:000000f0 .Loc.92
   output.elf-main.s:298    .text:000000f0 .Loc.93
   output.elf-main.s:306    .text:00000100 L0
   output.elf-main.s:310    .text:00000102 .Loc.94
   output.elf-main.s:313    .text:00000102 .Loc.95
   output.elf-main.s:316    .text:00000104 .Loc.96
   output.elf-main.s:318    .text:00000106 L0
   output.elf-main.s:327    .text:00000106 clear_display_buffs
   output.elf-main.s:329    .text:00000106 .Loc.97
   output.elf-main.s:330    .text:00000106 L0
   output.elf-main.s:335    .text:00000106 .Loc.98
   output.elf-main.s:346    .text:00000118 .Loc.99
   output.elf-main.s:357    .text:0000012a .Loc.100
   output.elf-main.s:368    .text:0000013c .Loc.101
   output.elf-main.s:380    .text:0000014e .Loc.102
   output.elf-main.s:382    .text:00000150 L0
   output.elf-main.s:387    .text:00000150 init_spi0_LM74
   output.elf-main.s:389    .text:00000150 .Loc.103
   output.elf-main.s:390    .text:00000150 L0
   output.elf-main.s:395    .text:00000150 .Loc.104
   output.elf-main.s:396    .text:00000150 .Loc.105
   output.elf-main.s:400    .text:00000156 .Loc.106
   output.elf-main.s:403    .text:0000015a .Loc.107
   output.elf-main.s:404    .text:0000015a .Loc.108
   output.elf-main.s:406    .text:0000015c .Loc.109
   output.elf-main.s:409    .text:00000160 .Loc.110
   output.elf-main.s:410    .text:00000160 .Loc.111
   output.elf-main.s:412    .text:00000162 .Loc.112
   output.elf-main.s:415    .text:00000166 .Loc.113
   output.elf-main.s:416    .text:00000166 .Loc.114
   output.elf-main.s:418    .text:00000168 .Loc.115
   output.elf-main.s:421    .text:0000016c .Loc.116
   output.elf-main.s:422    .text:0000016c .Loc.117
   output.elf-main.s:424    .text:0000016e .Loc.118
   output.elf-main.s:427    .text:00000172 .Loc.119
   output.elf-main.s:428    .text:00000172 .Loc.120
   output.elf-main.s:433    .text:0000017a .Loc.121
   output.elf-main.s:434    .text:0000017a .Loc.122
   output.elf-main.s:438    .text:0000017e .Loc.123
   output.elf-main.s:440    .text:00000180 L0
   output.elf-main.s:445    .text:00000180 read_spi0_LM74
   output.elf-main.s:447    .text:00000180 .Loc.124
   output.elf-main.s:448    .text:00000180 L0
   output.elf-main.s:453    .text:00000180 .Loc.125
   output.elf-main.s:454    .text:00000180 .Loc.126
   output.elf-main.s:458    .text:00000186 .Loc.127
   output.elf-main.s:460    .text:00000186 .Loc.128
   output.elf-main.s:461    .text:00000186 .Loc.129
   output.elf-main.s:464    .text:0000018c .Loc.130
   output.elf-main.s:466    .text:0000018c .Loc.131
   output.elf-main.s:467    .text:0000018c .Loc.132
   output.elf-main.s:468    .text:0000018c .Loc.133
   output.elf-main.s:470    .text:00000190 .Loc.134
   output.elf-main.s:473    .text:00000194 .Loc.135
   output.elf-main.s:474    .text:00000194 .Loc.136
   output.elf-main.s:478    .text:0000019a .Loc.137
   output.elf-main.s:481    .text:0000019c .Loc.138
   output.elf-main.s:482    .text:0000019c .Loc.139
   output.elf-main.s:486    .text:000001a0 .Loc.140
   output.elf-main.s:487    .text:000001a0 .Loc.141
   output.elf-main.s:490    .text:000001a4 .Loc.142
   output.elf-main.s:492    .text:000001a4 .Loc.143
   output.elf-main.s:493    .text:000001a4 .Loc.144
   output.elf-main.s:494    .text:000001a4 .Loc.145
   output.elf-main.s:496    .text:000001a8 .Loc.146
   output.elf-main.s:499    .text:000001ac .Loc.147
   output.elf-main.s:500    .text:000001ac .Loc.148
   output.elf-main.s:503    .text:000001b0 .Loc.149
   output.elf-main.s:504    .text:000001b0 .Loc.150
   output.elf-main.s:506    .text:000001b2 .Loc.151
   output.elf-main.s:509    .text:000001b6 .Loc.152
   output.elf-main.s:510    .text:000001b6 .Loc.153
   output.elf-main.s:516    .text:000001be L0
   output.elf-main.s:529    .text:000001be main
   output.elf-main.s:531    .text:000001be .Loc.154
   output.elf-main.s:532    .text:000001be L0
   output.elf-main.s:544    .text:000001c8 .Loc.155
   output.elf-main.s:547    .text:000001cc .Loc.156
   output.elf-main.s:550    .text:000001d0 .Loc.157
   output.elf-main.s:553    .text:000001d4 .Loc.158
   output.elf-main.s:557    .text:000001da .Loc.159
   output.elf-main.s:561    .text:000001e0 .Loc.160
   output.elf-main.s:569    .text:000001e6 .Loc.161
   output.elf-main.s:570    .text:000001e6 .Loc.162
   output.elf-main.s:581    .text:000001f6 .Loc.163
   output.elf-main.s:584    .text:000001fa .Loc.164
   output.elf-main.s:593    .text:00000206 .Loc.165
   output.elf-main.s:598    .text:0000020e .Loc.166
   output.elf-main.s:600    .text:00000210 .Loc.167
   output.elf-main.s:604    .text:00000216 .Loc.168
   output.elf-main.s:609    .text:0000021a .Loc.169
   output.elf-main.s:614    .text:00000220 .Loc.170
   output.elf-main.s:615    .text:00000220 .Loc.171
   output.elf-main.s:624    .text:0000022e .Loc.172
   output.elf-main.s:626    .text:0000022e .Loc.173
   output.elf-main.s:627    .text:0000022e .Loc.174
   output.elf-main.s:630    .text:00000230 .Loc.175
   output.elf-main.s:635    .text:00000238 .Loc.176
   output.elf-main.s:646    .text:0000024a .Loc.177
   output.elf-main.s:650    .text:0000024c .Loc.178
   output.elf-main.s:651    .text:0000024c .Loc.179
   output.elf-main.s:655    .text:00000252 .Loc.180
   output.elf-main.s:676    .text:0000027a .Loc.181
   output.elf-main.s:699    .text:000002a4 .Loc.182
   output.elf-main.s:702    .text:000002a6 .Loc.183
   output.elf-main.s:705    .text:000002a8 .Loc.184
   output.elf-main.s:708    .text:000002aa .Loc.185
   output.elf-main.s:709    .text:000002aa .Loc.186
   output.elf-main.s:713    .text:000002ae .Loc.187
   output.elf-main.s:714    .text:000002ae .Loc.188
   output.elf-main.s:731    .text:000002ce .Loc.189
   output.elf-main.s:734    .text:000002d0 .Loc.190
   output.elf-main.s:737    .text:000002d2 .Loc.191
   output.elf-main.s:740    .text:000002d4 .Loc.192
   output.elf-main.s:743    .text:000002d6 .Loc.193
   output.elf-main.s:747    .text:000002d8 .Loc.194
   output.elf-main.s:750    .text:000002de L0
   output.elf-main.s:752    .text:000002e0 .Loc.195
   output.elf-main.s:754    .text:000002e0 .Loc.196
   output.elf-main.s:755    .text:000002e0 .Loc.197
   output.elf-main.s:759    .text:000002e6 .Loc.198
   output.elf-main.s:786    .text:00000318 .Loc.199
   output.elf-main.s:790    .text:0000031c .Loc.200
   output.elf-main.s:793    .text:0000031e .Loc.201
   output.elf-main.s:796    .text:00000320 .Loc.202
   output.elf-main.s:806    .text:00000330 .Loc.203
   output.elf-main.s:809    .text:00000332 .Loc.204
   output.elf-main.s:824    .text:0000034e .Loc.205
   output.elf-main.s:825    .text:0000034e .Loc.206
   output.elf-main.s:842    .text:0000036e .Loc.207
   output.elf-main.s:857    .text:0000038a .Loc.208
   output.elf-main.s:872    .text:000003a6 .Loc.209
   output.elf-main.s:887    .text:000003c2 .Loc.210
   output.elf-main.s:891    .text:000003c6 .Loc.211
   output.elf-main.s:892    .text:000003c6 .Loc.212
   output.elf-main.s:897    .text:000003ca .Loc.213
   output.elf-main.s:899    .text:000003ca .Loc.214
   output.elf-main.s:900    .text:000003ca .Loc.215
   output.elf-main.s:901    .text:000003ca .Loc.216
   output.elf-main.s:907    .text:000003d2 .Loc.217
   output.elf-main.s:908    .text:000003d2 .Loc.218
   output.elf-main.s:910    .text:000003d2 .Loc.219
   output.elf-main.s:911    .text:000003d2 .Loc.220
   output.elf-main.s:914    .text:000003d6 .Loc.221
   output.elf-main.s:918    .text:000003d8 L0
   output.elf-main.s:947    .text:000003d8 L0
                     .debug_frame:00000000 L0
   output.elf-main.s:96     .text:0000003e .L3
   output.elf-main.s:163    .text:00000076 .L5
   output.elf-main.s:155    .text:00000070 .L6
   output.elf-main.s:200    .text:0000009a .L7
   output.elf-main.s:192    .text:00000094 .L8
   output.elf-main.s:237    .text:000000be .L9
   output.elf-main.s:229    .text:000000b8 .L10
   output.elf-main.s:274    .text:000000e2 .L11
   output.elf-main.s:266    .text:000000dc .L12
   output.elf-main.s:302    .text:000000f6 .L11
   output.elf-main.s:341    .text:00000110 .L01
   output.elf-main.s:352    .text:00000122 .L02
   output.elf-main.s:363    .text:00000134 .L03
   output.elf-main.s:374    .text:00000146 .L04
   output.elf-main.s:465    .text:0000018c .L16
   output.elf-main.s:491    .text:000001a4 .L17
   output.elf-main.s:896    .text:000003ca .L23
   output.elf-main.s:578    .text:000001f2 .L21
   output.elf-main.s:575    .text:000001ee .L12
   output.elf-main.s:590    .text:00000202 .L22
   output.elf-main.s:587    .text:000001fe .L13
   output.elf-main.s:566    .text:000001e6 .L20
   output.elf-main.s:746    .text:000002d8 .L21
   output.elf-main.s:649    .text:0000024c .L22
   output.elf-main.s:801    .text:00000328 .L05
   output.elf-main.s:608    .text:0000021a .L19
   output.elf-main.s:1770   .debug_abbrev:00000000 .Ldebug_abbrev0
   output.elf-main.s:10     .text:00000000 .Ltext0
   output.elf-main.s:943    .text:000003d8 .Letext0
   output.elf-main.s:2990   .debug_line:00000000 .Ldebug_line0
   output.elf-main.s:530    .text:000001be .LFB11
   output.elf-main.s:919    .text:000003d8 .LFE11
   output.elf-main.s:2964   .debug_rnglists:0000000c .LLRL9
   output.elf-main.s:2412   .debug_loclists:0000001e .LLST10
   output.elf-main.s:2393   .debug_loclists:0000000c .LVUS10
   output.elf-main.s:2559   .debug_loclists:000000c7 .LLST11
   output.elf-main.s:2552   .debug_loclists:000000c1 .LVUS11
   output.elf-main.s:2606   .debug_loclists:000000fa .LLST12
   output.elf-main.s:2591   .debug_loclists:000000ec .LVUS12
   output.elf-main.s:2972   .debug_rnglists:00000017 .LLRL13
   output.elf-main.s:2715   .debug_loclists:00000179 .LLST14
   output.elf-main.s:2710   .debug_loclists:00000175 .LVUS14
   output.elf-main.s:2980   .debug_rnglists:00000022 .LLRL15
   output.elf-main.s:2738   .debug_loclists:00000192 .LLST16
   output.elf-main.s:2733   .debug_loclists:0000018e .LVUS16
   output.elf-main.s:659    .text:0000025a .LVL45
   output.elf-main.s:675    .text:0000027a .LVL46
   output.elf-main.s:696    .text:000002a2 .LVL47
   output.elf-main.s:730    .text:000002ce .LVL53
   output.elf-main.s:763    .text:000002ee .LVL59
   output.elf-main.s:783    .text:00000316 .LVL60
   output.elf-main.s:823    .text:0000034e .LVL66
   output.elf-main.s:841    .text:0000036e .LVL67
   output.elf-main.s:856    .text:0000038a .LVL68
   output.elf-main.s:871    .text:000003a6 .LVL69
   output.elf-main.s:886    .text:000003c2 .LVL70
   output.elf-main.s:889    .text:000003c6 .LVL71
   output.elf-main.s:903    .text:000003ce .LVL73
   output.elf-main.s:546    .text:000001cc .LVL35
   output.elf-main.s:549    .text:000001d0 .LVL36
   output.elf-main.s:552    .text:000001d4 .LVL37
   output.elf-main.s:556    .text:000001da .LVL38
   output.elf-main.s:560    .text:000001e0 .LVL39
   output.elf-main.s:563    .text:000001e4 .LVL40
   output.elf-main.s:446    .text:00000180 .LFB10
   output.elf-main.s:517    .text:000001be .LFE10
   output.elf-main.s:2758   .debug_loclists:000001a8 .LLST8
   output.elf-main.s:2751   .debug_loclists:000001a2 .LVUS8
   output.elf-main.s:388    .text:00000150 .LFB9
   output.elf-main.s:441    .text:00000180 .LFE9
   output.elf-main.s:328    .text:00000106 .LFB8
   output.elf-main.s:383    .text:00000150 .LFE8
   output.elf-main.s:121    .text:00000052 .LFB7
   output.elf-main.s:319    .text:00000106 .LFE7
   output.elf-main.s:148    .text:0000006c .LBB8
   output.elf-main.s:174    .text:00000084 .LBE8
   output.elf-main.s:2794   .debug_loclists:000001d0 .LLST1
   output.elf-main.s:2789   .debug_loclists:000001cc .LVUS1
   output.elf-main.s:162    .text:00000076 .LVL9
   output.elf-main.s:184    .text:00000090 .LBB9
   output.elf-main.s:211    .text:000000a8 .LBE9
   output.elf-main.s:2812   .debug_loclists:000001e1 .LLST2
   output.elf-main.s:2807   .debug_loclists:000001dd .LVUS2
   output.elf-main.s:199    .text:0000009a .LVL15
   output.elf-main.s:221    .text:000000b4 .LBB10
   output.elf-main.s:248    .text:000000cc .LBE10
   output.elf-main.s:2830   .debug_loclists:000001f5 .LLST3
   output.elf-main.s:2825   .debug_loclists:000001f1 .LVUS3
   output.elf-main.s:236    .text:000000be .LVL21
   output.elf-main.s:258    .text:000000d8 .LBB11
   output.elf-main.s:285    .text:000000f0 .LBE11
   output.elf-main.s:2850   .debug_loclists:0000020b .LLST4
   output.elf-main.s:2843   .debug_loclists:00000205 .LVUS4
   output.elf-main.s:273    .text:000000e2 .LVL27
   output.elf-main.s:289    .text:000000f0 .LBI12
   output.elf-main.s:288    .text:000000f0 .LBB12
   output.elf-main.s:312    .text:00000102 .LBE12
   output.elf-main.s:2876   .debug_loclists:0000022c .LLST5
   output.elf-main.s:2873   .debug_loclists:0000022a .LVUS5
   output.elf-main.s:2888   .debug_loclists:0000023b .LLST6
   output.elf-main.s:2885   .debug_loclists:00000239 .LVUS6
   output.elf-main.s:2900   .debug_loclists:0000024a .LLST7
   output.elf-main.s:2897   .debug_loclists:00000248 .LVUS7
   output.elf-main.s:134    .text:0000005a .LVL3
   output.elf-main.s:138    .text:00000060 .LVL4
   output.elf-main.s:142    .text:00000066 .LVL5
   output.elf-main.s:146    .text:0000006c .LVL6
   output.elf-main.s:178    .text:0000008a .LVL10
   output.elf-main.s:182    .text:00000090 .LVL11
   output.elf-main.s:215    .text:000000ae .LVL16
   output.elf-main.s:219    .text:000000b4 .LVL17
   output.elf-main.s:252    .text:000000d2 .LVL22
   output.elf-main.s:256    .text:000000d8 .LVL23
   output.elf-main.s:76     .text:00000030 .LFB6
   output.elf-main.s:116    .text:00000052 .LFE6
   output.elf-main.s:2916   .debug_loclists:0000025d .LLST0
   output.elf-main.s:2909   .debug_loclists:00000257 .LVUS0
   output.elf-main.s:16     .text:00000000 .LFB5
   output.elf-main.s:70     .text:00000030 .LFE5
   output.elf-main.s:948    .debug_info:00000000 .Ldebug_info0

UNDEFINED SYMBOLS
__floatunsisf
__mulsf3
__addsf3
__subsf3
sprintf
__divsf3
__do_clear_bss
